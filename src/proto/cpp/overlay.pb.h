// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: overlay.proto

#ifndef PROTOBUF_overlay_2eproto__INCLUDED
#define PROTOBUF_overlay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "chain.pb.h"
#include "consensus.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_overlay_2eproto();
void protobuf_AssignDesc_overlay_2eproto();
void protobuf_ShutdownFile_overlay_2eproto();

class BlockReward;
class ChainHello;
class ChainPeerMessage;
class ChainResponse;
class ChainStatus;
class ChainSubscribeTx;
class ChainTxStatus;
class DontHave;
class EntryList;
class GetLedgers;
class Hello;
class HelloResponse;
class LedgerUpgradeNotify;
class Ledgers;
class MerkelProof;
class MessageChannel;
class MessageChannelChangeChildValidator;
class MessageChannelChildChallengeHead;
class MessageChannelChildGenesesRequest;
class MessageChannelChildGenesesResponse;
class MessageChannelCreateChildChain;
class MessageChannelDeposit;
class MessageChannelHandleWithdrawal;
class MessageChannelHello;
class MessageChannelHelloResponse;
class MessageChannelProposer;
class MessageChannelQueryChangeChildValidator;
class MessageChannelQueryDeposit;
class MessageChannelQueryHead;
class MessageChannelQuerySubmitHead;
class MessageChannelQueryWithdrawal;
class MessageChannelResponse;
class MessageChannelSubmitHead;
class MessageChannelWithdrawal;
class MessageChannelWithdrawalChallenge;
class MessageChannelchildWithdrawalChallenge;
class Peer;
class Peers;

enum Ledgers_SyncCode {
  Ledgers_SyncCode_OK = 0,
  Ledgers_SyncCode_OUT_OF_SYNC = 1,
  Ledgers_SyncCode_OUT_OF_LEDGERS = 2,
  Ledgers_SyncCode_BUSY = 3,
  Ledgers_SyncCode_REFUSE = 4,
  Ledgers_SyncCode_INTERNAL = 5,
  Ledgers_SyncCode_Ledgers_SyncCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ledgers_SyncCode_Ledgers_SyncCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ledgers_SyncCode_IsValid(int value);
const Ledgers_SyncCode Ledgers_SyncCode_SyncCode_MIN = Ledgers_SyncCode_OK;
const Ledgers_SyncCode Ledgers_SyncCode_SyncCode_MAX = Ledgers_SyncCode_INTERNAL;
const int Ledgers_SyncCode_SyncCode_ARRAYSIZE = Ledgers_SyncCode_SyncCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ledgers_SyncCode_descriptor();
inline const ::std::string& Ledgers_SyncCode_Name(Ledgers_SyncCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ledgers_SyncCode_descriptor(), value);
}
inline bool Ledgers_SyncCode_Parse(
    const ::std::string& name, Ledgers_SyncCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ledgers_SyncCode>(
    Ledgers_SyncCode_descriptor(), name, value);
}
enum ChainTxStatus_TxStatus {
  ChainTxStatus_TxStatus_UNDEFINED = 0,
  ChainTxStatus_TxStatus_CONFIRMED = 1,
  ChainTxStatus_TxStatus_PENDING = 2,
  ChainTxStatus_TxStatus_COMPLETE = 3,
  ChainTxStatus_TxStatus_FAILURE = 4,
  ChainTxStatus_TxStatus_ChainTxStatus_TxStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChainTxStatus_TxStatus_ChainTxStatus_TxStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChainTxStatus_TxStatus_IsValid(int value);
const ChainTxStatus_TxStatus ChainTxStatus_TxStatus_TxStatus_MIN = ChainTxStatus_TxStatus_UNDEFINED;
const ChainTxStatus_TxStatus ChainTxStatus_TxStatus_TxStatus_MAX = ChainTxStatus_TxStatus_FAILURE;
const int ChainTxStatus_TxStatus_TxStatus_ARRAYSIZE = ChainTxStatus_TxStatus_TxStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChainTxStatus_TxStatus_descriptor();
inline const ::std::string& ChainTxStatus_TxStatus_Name(ChainTxStatus_TxStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChainTxStatus_TxStatus_descriptor(), value);
}
inline bool ChainTxStatus_TxStatus_Parse(
    const ::std::string& name, ChainTxStatus_TxStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChainTxStatus_TxStatus>(
    ChainTxStatus_TxStatus_descriptor(), name, value);
}
enum OVERLAY_MESSAGE_TYPE {
  OVERLAY_MSGTYPE_NONE = 0,
  OVERLAY_MSGTYPE_PING = 1,
  OVERLAY_MSGTYPE_HELLO = 2,
  OVERLAY_MSGTYPE_PEERS = 3,
  OVERLAY_MSGTYPE_TRANSACTION = 4,
  OVERLAY_MSGTYPE_LEDGERS = 5,
  OVERLAY_MSGTYPE_PBFT = 6,
  OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY = 7,
  OVERLAY_MESSAGE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OVERLAY_MESSAGE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OVERLAY_MESSAGE_TYPE_IsValid(int value);
const OVERLAY_MESSAGE_TYPE OVERLAY_MESSAGE_TYPE_MIN = OVERLAY_MSGTYPE_NONE;
const OVERLAY_MESSAGE_TYPE OVERLAY_MESSAGE_TYPE_MAX = OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY;
const int OVERLAY_MESSAGE_TYPE_ARRAYSIZE = OVERLAY_MESSAGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OVERLAY_MESSAGE_TYPE_descriptor();
inline const ::std::string& OVERLAY_MESSAGE_TYPE_Name(OVERLAY_MESSAGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OVERLAY_MESSAGE_TYPE_descriptor(), value);
}
inline bool OVERLAY_MESSAGE_TYPE_Parse(
    const ::std::string& name, OVERLAY_MESSAGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OVERLAY_MESSAGE_TYPE>(
    OVERLAY_MESSAGE_TYPE_descriptor(), name, value);
}
enum ChainMessageType {
  CHAIN_TYPE_NONE = 0,
  CHAIN_HELLO = 10,
  CHAIN_TX_STATUS = 11,
  CHAIN_PEER_ONLINE = 12,
  CHAIN_PEER_OFFLINE = 13,
  CHAIN_PEER_MESSAGE = 14,
  CHAIN_SUBMITTRANSACTION = 15,
  CHAIN_LEDGER_HEADER = 16,
  CHAIN_SUBSCRIBE_TX = 17,
  CHAIN_TX_ENV_STORE = 18,
  ChainMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChainMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChainMessageType_IsValid(int value);
const ChainMessageType ChainMessageType_MIN = CHAIN_TYPE_NONE;
const ChainMessageType ChainMessageType_MAX = CHAIN_TX_ENV_STORE;
const int ChainMessageType_ARRAYSIZE = ChainMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChainMessageType_descriptor();
inline const ::std::string& ChainMessageType_Name(ChainMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChainMessageType_descriptor(), value);
}
inline bool ChainMessageType_Parse(
    const ::std::string& name, ChainMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChainMessageType>(
    ChainMessageType_descriptor(), name, value);
}
enum MESSAGE_CHANNEL_NODE_TYPE {
  MESSAGE_CHANNEL_NODE_TYPE_NONE = 0,
  MESSAGE_CHANNEL_NODE_PACKAGE = 30,
  MESSAGE_CHANNEL_NODE_HELLO = 31,
  EVENT_WITHDRAWAL = 32,
  MESSAGE_CHANNEL_NODE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MESSAGE_CHANNEL_NODE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MESSAGE_CHANNEL_NODE_TYPE_IsValid(int value);
const MESSAGE_CHANNEL_NODE_TYPE MESSAGE_CHANNEL_NODE_TYPE_MIN = MESSAGE_CHANNEL_NODE_TYPE_NONE;
const MESSAGE_CHANNEL_NODE_TYPE MESSAGE_CHANNEL_NODE_TYPE_MAX = EVENT_WITHDRAWAL;
const int MESSAGE_CHANNEL_NODE_TYPE_ARRAYSIZE = MESSAGE_CHANNEL_NODE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_NODE_TYPE_descriptor();
inline const ::std::string& MESSAGE_CHANNEL_NODE_TYPE_Name(MESSAGE_CHANNEL_NODE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_CHANNEL_NODE_TYPE_descriptor(), value);
}
inline bool MESSAGE_CHANNEL_NODE_TYPE_Parse(
    const ::std::string& name, MESSAGE_CHANNEL_NODE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_CHANNEL_NODE_TYPE>(
    MESSAGE_CHANNEL_NODE_TYPE_descriptor(), name, value);
}
enum MESSAGE_CHANNEL_TYPE {
  MESSAGE_CHANNEL_TYPE_NONE = 0,
  MESSAGE_CHANNEL_CREATE_CHILD_CHAIN = 1,
  MESSAGE_CHANNEL_MAIN_MIX = 2,
  MESSAGE_CHANNEL_CHILD_MIX = 3,
  MESSAGE_CHANNEL_DEPOSIT = 4,
  MESSAGE_CHANNEL_WITHDRAWAL = 5,
  MESSAGE_CHANNEL_FAST_WITHDRAWAL = 6,
  MESSAGE_CHANNEL_SUBMIT_HEAD = 7,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL = 8,
  MESSAGE_CHANNEL_CHALLENGE_HEAD = 9,
  MESSAGE_CHANNEL_CHILD_GENESES_REQUEST = 10,
  MESSAGE_CHANNEL_CHILD_GENESES_RESPONSE = 11,
  MESSAGE_CHANNEL_QUERY_HEAD = 12,
  MESSAGE_CHANNEL_QUERY_DEPOSIT = 13,
  MESSAGE_CHANNEL_CHANGE_CHILD_VALIDATOR = 14,
  MESSAGE_CHANNEL_QUERY_CHANGE_CHILD_VALIDATOR = 15,
  MESSAGE_CHANNEL_QUERY_SUBMIT_HEAD = 16,
  MESSAGE_CHANNEL_QUERY_WITHDRAWAL = 17,
  MESSAGE_CHANNEL_CHILD_CHALLENGE_HEAD = 18,
  MESSAGE_CHANNEL_CHILD_CHALLENGE_WITHDRAWAL = 19,
  MESSAGE_CHANNEL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MESSAGE_CHANNEL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MESSAGE_CHANNEL_TYPE_IsValid(int value);
const MESSAGE_CHANNEL_TYPE MESSAGE_CHANNEL_TYPE_MIN = MESSAGE_CHANNEL_TYPE_NONE;
const MESSAGE_CHANNEL_TYPE MESSAGE_CHANNEL_TYPE_MAX = MESSAGE_CHANNEL_CHILD_CHALLENGE_WITHDRAWAL;
const int MESSAGE_CHANNEL_TYPE_ARRAYSIZE = MESSAGE_CHANNEL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_TYPE_descriptor();
inline const ::std::string& MESSAGE_CHANNEL_TYPE_Name(MESSAGE_CHANNEL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_CHANNEL_TYPE_descriptor(), value);
}
inline bool MESSAGE_CHANNEL_TYPE_Parse(
    const ::std::string& name, MESSAGE_CHANNEL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_CHANNEL_TYPE>(
    MESSAGE_CHANNEL_TYPE_descriptor(), name, value);
}
enum MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE {
  MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_SUCCESS = 0,
  MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_NONEXIST = 1,
  MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_DOCTORED = 2,
  MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_IsValid(int value);
const MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_MIN = MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_SUCCESS;
const MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_MAX = MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_DOCTORED;
const int MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_ARRAYSIZE = MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_descriptor();
inline const ::std::string& MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_Name(MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_descriptor(), value);
}
inline bool MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_Parse(
    const ::std::string& name, MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE>(
    MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_descriptor(), name, value);
}
enum MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE {
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_SUCCESS = 0,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_NONEXIST = 1,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_DOCTORED = 2,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_CONTRACT_CPC_QUERY = 3,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_CONTRACT_CPC_DOCTORED = 4,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_IsValid(int value);
const MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_MIN = MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_SUCCESS;
const MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_MAX = MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_CONTRACT_CPC_DOCTORED;
const int MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_ARRAYSIZE = MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_descriptor();
inline const ::std::string& MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_Name(MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_descriptor(), value);
}
inline bool MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_Parse(
    const ::std::string& name, MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE>(
    MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_descriptor(), name, value);
}
// ===================================================================

class Hello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hello& default_instance();

  void Swap(Hello* other);

  // implements Message ----------------------------------------------

  inline Hello* New() const { return New(NULL); }

  Hello* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Hello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 network_id = 1;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  ::google::protobuf::int64 network_id() const;
  void set_network_id(::google::protobuf::int64 value);

  // optional int64 ledger_version = 2;
  void clear_ledger_version();
  static const int kLedgerVersionFieldNumber = 2;
  ::google::protobuf::int64 ledger_version() const;
  void set_ledger_version(::google::protobuf::int64 value);

  // optional int64 overlay_version = 3;
  void clear_overlay_version();
  static const int kOverlayVersionFieldNumber = 3;
  ::google::protobuf::int64 overlay_version() const;
  void set_overlay_version(::google::protobuf::int64 value);

  // optional string bumo_version = 4;
  void clear_bumo_version();
  static const int kBumoVersionFieldNumber = 4;
  const ::std::string& bumo_version() const;
  void set_bumo_version(const ::std::string& value);
  void set_bumo_version(const char* value);
  void set_bumo_version(const char* value, size_t size);
  ::std::string* mutable_bumo_version();
  ::std::string* release_bumo_version();
  void set_allocated_bumo_version(::std::string* bumo_version);

  // optional int64 listening_port = 5;
  void clear_listening_port();
  static const int kListeningPortFieldNumber = 5;
  ::google::protobuf::int64 listening_port() const;
  void set_listening_port(::google::protobuf::int64 value);

  // optional string node_address = 6;
  void clear_node_address();
  static const int kNodeAddressFieldNumber = 6;
  const ::std::string& node_address() const;
  void set_node_address(const ::std::string& value);
  void set_node_address(const char* value);
  void set_node_address(const char* value, size_t size);
  ::std::string* mutable_node_address();
  ::std::string* release_node_address();
  void set_allocated_node_address(::std::string* node_address);

  // optional string node_rand = 7;
  void clear_node_rand();
  static const int kNodeRandFieldNumber = 7;
  const ::std::string& node_rand() const;
  void set_node_rand(const ::std::string& value);
  void set_node_rand(const char* value);
  void set_node_rand(const char* value, size_t size);
  ::std::string* mutable_node_rand();
  ::std::string* release_node_rand();
  void set_allocated_node_rand(::std::string* node_rand);

  // @@protoc_insertion_point(class_scope:protocol.Hello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 network_id_;
  ::google::protobuf::int64 ledger_version_;
  ::google::protobuf::int64 overlay_version_;
  ::google::protobuf::internal::ArenaStringPtr bumo_version_;
  ::google::protobuf::int64 listening_port_;
  ::google::protobuf::internal::ArenaStringPtr node_address_;
  ::google::protobuf::internal::ArenaStringPtr node_rand_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static Hello* default_instance_;
};
// -------------------------------------------------------------------

class HelloResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.HelloResponse) */ {
 public:
  HelloResponse();
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloResponse& default_instance();

  void Swap(HelloResponse* other);

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const { return New(NULL); }

  HelloResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.ERRORCODE error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::protocol::ERRORCODE error_code() const;
  void set_error_code(::protocol::ERRORCODE value);

  // optional string error_desc = 2;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 2;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // @@protoc_insertion_point(class_scope:protocol.HelloResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static HelloResponse* default_instance_;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  void Swap(Peer* other);

  // implements Message ----------------------------------------------

  inline Peer* New() const { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int64 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int64 port() const;
  void set_port(::google::protobuf::int64 value);

  // optional int64 num_failures = 3;
  void clear_num_failures();
  static const int kNumFailuresFieldNumber = 3;
  ::google::protobuf::int64 num_failures() const;
  void set_num_failures(::google::protobuf::int64 value);

  // optional int64 next_attempt_time = 4;
  void clear_next_attempt_time();
  static const int kNextAttemptTimeFieldNumber = 4;
  ::google::protobuf::int64 next_attempt_time() const;
  void set_next_attempt_time(::google::protobuf::int64 value);

  // optional int64 active_time = 5;
  void clear_active_time();
  static const int kActiveTimeFieldNumber = 5;
  ::google::protobuf::int64 active_time() const;
  void set_active_time(::google::protobuf::int64 value);

  // optional int64 connection_id = 6;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 6;
  ::google::protobuf::int64 connection_id() const;
  void set_connection_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int64 port_;
  ::google::protobuf::int64 num_failures_;
  ::google::protobuf::int64 next_attempt_time_;
  ::google::protobuf::int64 active_time_;
  ::google::protobuf::int64 connection_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class Peers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Peers) */ {
 public:
  Peers();
  virtual ~Peers();

  Peers(const Peers& from);

  inline Peers& operator=(const Peers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peers& default_instance();

  void Swap(Peers* other);

  // implements Message ----------------------------------------------

  inline Peers* New() const { return New(NULL); }

  Peers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peers& from);
  void MergeFrom(const Peers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Peers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.Peer peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const ::protocol::Peer& peers(int index) const;
  ::protocol::Peer* mutable_peers(int index);
  ::protocol::Peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::protocol::Peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::protocol::Peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:protocol.Peers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Peer > peers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static Peers* default_instance_;
};
// -------------------------------------------------------------------

class GetLedgers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.GetLedgers) */ {
 public:
  GetLedgers();
  virtual ~GetLedgers();

  GetLedgers(const GetLedgers& from);

  inline GetLedgers& operator=(const GetLedgers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLedgers& default_instance();

  void Swap(GetLedgers* other);

  // implements Message ----------------------------------------------

  inline GetLedgers* New() const { return New(NULL); }

  GetLedgers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLedgers& from);
  void MergeFrom(const GetLedgers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLedgers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 begin = 1;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // optional int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // optional int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 chain_id = 4;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 4;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.GetLedgers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 chain_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static GetLedgers* default_instance_;
};
// -------------------------------------------------------------------

class Ledgers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Ledgers) */ {
 public:
  Ledgers();
  virtual ~Ledgers();

  Ledgers(const Ledgers& from);

  inline Ledgers& operator=(const Ledgers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ledgers& default_instance();

  void Swap(Ledgers* other);

  // implements Message ----------------------------------------------

  inline Ledgers* New() const { return New(NULL); }

  Ledgers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ledgers& from);
  void MergeFrom(const Ledgers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ledgers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ledgers_SyncCode SyncCode;
  static const SyncCode OK =
    Ledgers_SyncCode_OK;
  static const SyncCode OUT_OF_SYNC =
    Ledgers_SyncCode_OUT_OF_SYNC;
  static const SyncCode OUT_OF_LEDGERS =
    Ledgers_SyncCode_OUT_OF_LEDGERS;
  static const SyncCode BUSY =
    Ledgers_SyncCode_BUSY;
  static const SyncCode REFUSE =
    Ledgers_SyncCode_REFUSE;
  static const SyncCode INTERNAL =
    Ledgers_SyncCode_INTERNAL;
  static inline bool SyncCode_IsValid(int value) {
    return Ledgers_SyncCode_IsValid(value);
  }
  static const SyncCode SyncCode_MIN =
    Ledgers_SyncCode_SyncCode_MIN;
  static const SyncCode SyncCode_MAX =
    Ledgers_SyncCode_SyncCode_MAX;
  static const int SyncCode_ARRAYSIZE =
    Ledgers_SyncCode_SyncCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SyncCode_descriptor() {
    return Ledgers_SyncCode_descriptor();
  }
  static inline const ::std::string& SyncCode_Name(SyncCode value) {
    return Ledgers_SyncCode_Name(value);
  }
  static inline bool SyncCode_Parse(const ::std::string& name,
      SyncCode* value) {
    return Ledgers_SyncCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .protocol.ConsensusValue values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::protocol::ConsensusValue& values(int index) const;
  ::protocol::ConsensusValue* mutable_values(int index);
  ::protocol::ConsensusValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >&
      values() const;

  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  void clear_sync_code();
  static const int kSyncCodeFieldNumber = 2;
  ::protocol::Ledgers_SyncCode sync_code() const;
  void set_sync_code(::protocol::Ledgers_SyncCode value);

  // optional int64 max_seq = 3;
  void clear_max_seq();
  static const int kMaxSeqFieldNumber = 3;
  ::google::protobuf::int64 max_seq() const;
  void set_max_seq(::google::protobuf::int64 value);

  // optional bytes proof = 4;
  void clear_proof();
  static const int kProofFieldNumber = 4;
  const ::std::string& proof() const;
  void set_proof(const ::std::string& value);
  void set_proof(const char* value);
  void set_proof(const void* value, size_t size);
  ::std::string* mutable_proof();
  ::std::string* release_proof();
  void set_allocated_proof(::std::string* proof);

  // optional int64 chain_id = 5;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 5;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Ledgers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue > values_;
  ::google::protobuf::int64 max_seq_;
  ::google::protobuf::internal::ArenaStringPtr proof_;
  ::google::protobuf::int64 chain_id_;
  int sync_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static Ledgers* default_instance_;
};
// -------------------------------------------------------------------

class DontHave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.DontHave) */ {
 public:
  DontHave();
  virtual ~DontHave();

  DontHave(const DontHave& from);

  inline DontHave& operator=(const DontHave& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DontHave& default_instance();

  void Swap(DontHave* other);

  // implements Message ----------------------------------------------

  inline DontHave* New() const { return New(NULL); }

  DontHave* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DontHave& from);
  void MergeFrom(const DontHave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DontHave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int64 type() const;
  void set_type(::google::protobuf::int64 value);

  // optional bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:protocol.DontHave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 type_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static DontHave* default_instance_;
};
// -------------------------------------------------------------------

class LedgerUpgradeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.LedgerUpgradeNotify) */ {
 public:
  LedgerUpgradeNotify();
  virtual ~LedgerUpgradeNotify();

  LedgerUpgradeNotify(const LedgerUpgradeNotify& from);

  inline LedgerUpgradeNotify& operator=(const LedgerUpgradeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LedgerUpgradeNotify& default_instance();

  void Swap(LedgerUpgradeNotify* other);

  // implements Message ----------------------------------------------

  inline LedgerUpgradeNotify* New() const { return New(NULL); }

  LedgerUpgradeNotify* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LedgerUpgradeNotify& from);
  void MergeFrom(const LedgerUpgradeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LedgerUpgradeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  ::google::protobuf::int64 nonce() const;
  void set_nonce(::google::protobuf::int64 value);

  // optional .protocol.LedgerUpgrade upgrade = 2;
  bool has_upgrade() const;
  void clear_upgrade();
  static const int kUpgradeFieldNumber = 2;
  const ::protocol::LedgerUpgrade& upgrade() const;
  ::protocol::LedgerUpgrade* mutable_upgrade();
  ::protocol::LedgerUpgrade* release_upgrade();
  void set_allocated_upgrade(::protocol::LedgerUpgrade* upgrade);

  // optional .protocol.Signature signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::protocol::Signature& signature() const;
  ::protocol::Signature* mutable_signature();
  ::protocol::Signature* release_signature();
  void set_allocated_signature(::protocol::Signature* signature);

  // @@protoc_insertion_point(class_scope:protocol.LedgerUpgradeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 nonce_;
  ::protocol::LedgerUpgrade* upgrade_;
  ::protocol::Signature* signature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static LedgerUpgradeNotify* default_instance_;
};
// -------------------------------------------------------------------

class EntryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.EntryList) */ {
 public:
  EntryList();
  virtual ~EntryList();

  EntryList(const EntryList& from);

  inline EntryList& operator=(const EntryList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryList& default_instance();

  void Swap(EntryList* other);

  // implements Message ----------------------------------------------

  inline EntryList* New() const { return New(NULL); }

  EntryList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntryList& from);
  void MergeFrom(const EntryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes entry = 1;
  int entry_size() const;
  void clear_entry();
  static const int kEntryFieldNumber = 1;
  const ::std::string& entry(int index) const;
  ::std::string* mutable_entry(int index);
  void set_entry(int index, const ::std::string& value);
  void set_entry(int index, const char* value);
  void set_entry(int index, const void* value, size_t size);
  ::std::string* add_entry();
  void add_entry(const ::std::string& value);
  void add_entry(const char* value);
  void add_entry(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& entry() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_entry();

  // @@protoc_insertion_point(class_scope:protocol.EntryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> entry_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static EntryList* default_instance_;
};
// -------------------------------------------------------------------

class ChainHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainHello) */ {
 public:
  ChainHello();
  virtual ~ChainHello();

  ChainHello(const ChainHello& from);

  inline ChainHello& operator=(const ChainHello& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainHello& default_instance();

  void Swap(ChainHello* other);

  // implements Message ----------------------------------------------

  inline ChainHello* New() const { return New(NULL); }

  ChainHello* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainHello& from);
  void MergeFrom(const ChainHello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.ChainMessageType api_list = 1;
  int api_list_size() const;
  void clear_api_list();
  static const int kApiListFieldNumber = 1;
  ::protocol::ChainMessageType api_list(int index) const;
  void set_api_list(int index, ::protocol::ChainMessageType value);
  void add_api_list(::protocol::ChainMessageType value);
  const ::google::protobuf::RepeatedField<int>& api_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_api_list();

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField<int> api_list_;
  mutable int _api_list_cached_byte_size_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainHello* default_instance_;
};
// -------------------------------------------------------------------

class ChainStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainStatus) */ {
 public:
  ChainStatus();
  virtual ~ChainStatus();

  ChainStatus(const ChainStatus& from);

  inline ChainStatus& operator=(const ChainStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainStatus& default_instance();

  void Swap(ChainStatus* other);

  // implements Message ----------------------------------------------

  inline ChainStatus* New() const { return New(NULL); }

  ChainStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainStatus& from);
  void MergeFrom(const ChainStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string self_addr = 1;
  void clear_self_addr();
  static const int kSelfAddrFieldNumber = 1;
  const ::std::string& self_addr() const;
  void set_self_addr(const ::std::string& value);
  void set_self_addr(const char* value);
  void set_self_addr(const char* value, size_t size);
  ::std::string* mutable_self_addr();
  ::std::string* release_self_addr();
  void set_allocated_self_addr(::std::string* self_addr);

  // optional int64 ledger_version = 2;
  void clear_ledger_version();
  static const int kLedgerVersionFieldNumber = 2;
  ::google::protobuf::int64 ledger_version() const;
  void set_ledger_version(::google::protobuf::int64 value);

  // optional int64 monitor_version = 3;
  void clear_monitor_version();
  static const int kMonitorVersionFieldNumber = 3;
  ::google::protobuf::int64 monitor_version() const;
  void set_monitor_version(::google::protobuf::int64 value);

  // optional string bumo_version = 4;
  void clear_bumo_version();
  static const int kBumoVersionFieldNumber = 4;
  const ::std::string& bumo_version() const;
  void set_bumo_version(const ::std::string& value);
  void set_bumo_version(const char* value);
  void set_bumo_version(const char* value, size_t size);
  ::std::string* mutable_bumo_version();
  ::std::string* release_bumo_version();
  void set_allocated_bumo_version(::std::string* bumo_version);

  // optional int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr self_addr_;
  ::google::protobuf::int64 ledger_version_;
  ::google::protobuf::int64 monitor_version_;
  ::google::protobuf::internal::ArenaStringPtr bumo_version_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainStatus* default_instance_;
};
// -------------------------------------------------------------------

class ChainPeerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainPeerMessage) */ {
 public:
  ChainPeerMessage();
  virtual ~ChainPeerMessage();

  ChainPeerMessage(const ChainPeerMessage& from);

  inline ChainPeerMessage& operator=(const ChainPeerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainPeerMessage& default_instance();

  void Swap(ChainPeerMessage* other);

  // implements Message ----------------------------------------------

  inline ChainPeerMessage* New() const { return New(NULL); }

  ChainPeerMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainPeerMessage& from);
  void MergeFrom(const ChainPeerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainPeerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string src_peer_addr = 1;
  void clear_src_peer_addr();
  static const int kSrcPeerAddrFieldNumber = 1;
  const ::std::string& src_peer_addr() const;
  void set_src_peer_addr(const ::std::string& value);
  void set_src_peer_addr(const char* value);
  void set_src_peer_addr(const char* value, size_t size);
  ::std::string* mutable_src_peer_addr();
  ::std::string* release_src_peer_addr();
  void set_allocated_src_peer_addr(::std::string* src_peer_addr);

  // repeated string des_peer_addrs = 2;
  int des_peer_addrs_size() const;
  void clear_des_peer_addrs();
  static const int kDesPeerAddrsFieldNumber = 2;
  const ::std::string& des_peer_addrs(int index) const;
  ::std::string* mutable_des_peer_addrs(int index);
  void set_des_peer_addrs(int index, const ::std::string& value);
  void set_des_peer_addrs(int index, const char* value);
  void set_des_peer_addrs(int index, const char* value, size_t size);
  ::std::string* add_des_peer_addrs();
  void add_des_peer_addrs(const ::std::string& value);
  void add_des_peer_addrs(const char* value);
  void add_des_peer_addrs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& des_peer_addrs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_des_peer_addrs();

  // optional bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:protocol.ChainPeerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr src_peer_addr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> des_peer_addrs_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainPeerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ChainSubscribeTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainSubscribeTx) */ {
 public:
  ChainSubscribeTx();
  virtual ~ChainSubscribeTx();

  ChainSubscribeTx(const ChainSubscribeTx& from);

  inline ChainSubscribeTx& operator=(const ChainSubscribeTx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainSubscribeTx& default_instance();

  void Swap(ChainSubscribeTx* other);

  // implements Message ----------------------------------------------

  inline ChainSubscribeTx* New() const { return New(NULL); }

  ChainSubscribeTx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainSubscribeTx& from);
  void MergeFrom(const ChainSubscribeTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainSubscribeTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string address = 1;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address(int index) const;
  ::std::string* mutable_address(int index);
  void set_address(int index, const ::std::string& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  ::std::string* add_address();
  void add_address(const ::std::string& value);
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_address();

  // @@protoc_insertion_point(class_scope:protocol.ChainSubscribeTx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainSubscribeTx* default_instance_;
};
// -------------------------------------------------------------------

class ChainResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainResponse) */ {
 public:
  ChainResponse();
  virtual ~ChainResponse();

  ChainResponse(const ChainResponse& from);

  inline ChainResponse& operator=(const ChainResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainResponse& default_instance();

  void Swap(ChainResponse* other);

  // implements Message ----------------------------------------------

  inline ChainResponse* New() const { return New(NULL); }

  ChainResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainResponse& from);
  void MergeFrom(const ChainResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional string error_desc = 2;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 2;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // @@protoc_insertion_point(class_scope:protocol.ChainResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  ::google::protobuf::int32 error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChainTxStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChainTxStatus) */ {
 public:
  ChainTxStatus();
  virtual ~ChainTxStatus();

  ChainTxStatus(const ChainTxStatus& from);

  inline ChainTxStatus& operator=(const ChainTxStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainTxStatus& default_instance();

  void Swap(ChainTxStatus* other);

  // implements Message ----------------------------------------------

  inline ChainTxStatus* New() const { return New(NULL); }

  ChainTxStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChainTxStatus& from);
  void MergeFrom(const ChainTxStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChainTxStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChainTxStatus_TxStatus TxStatus;
  static const TxStatus UNDEFINED =
    ChainTxStatus_TxStatus_UNDEFINED;
  static const TxStatus CONFIRMED =
    ChainTxStatus_TxStatus_CONFIRMED;
  static const TxStatus PENDING =
    ChainTxStatus_TxStatus_PENDING;
  static const TxStatus COMPLETE =
    ChainTxStatus_TxStatus_COMPLETE;
  static const TxStatus FAILURE =
    ChainTxStatus_TxStatus_FAILURE;
  static inline bool TxStatus_IsValid(int value) {
    return ChainTxStatus_TxStatus_IsValid(value);
  }
  static const TxStatus TxStatus_MIN =
    ChainTxStatus_TxStatus_TxStatus_MIN;
  static const TxStatus TxStatus_MAX =
    ChainTxStatus_TxStatus_TxStatus_MAX;
  static const int TxStatus_ARRAYSIZE =
    ChainTxStatus_TxStatus_TxStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TxStatus_descriptor() {
    return ChainTxStatus_TxStatus_descriptor();
  }
  static inline const ::std::string& TxStatus_Name(TxStatus value) {
    return ChainTxStatus_TxStatus_Name(value);
  }
  static inline bool TxStatus_Parse(const ::std::string& name,
      TxStatus* value) {
    return ChainTxStatus_TxStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protocol.ChainTxStatus.TxStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::protocol::ChainTxStatus_TxStatus status() const;
  void set_status(::protocol::ChainTxStatus_TxStatus value);

  // optional string tx_hash = 2;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional string source_address = 3;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 3;
  const ::std::string& source_address() const;
  void set_source_address(const ::std::string& value);
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  ::std::string* mutable_source_address();
  ::std::string* release_source_address();
  void set_allocated_source_address(::std::string* source_address);

  // optional int64 source_account_seq = 4;
  void clear_source_account_seq();
  static const int kSourceAccountSeqFieldNumber = 4;
  ::google::protobuf::int64 source_account_seq() const;
  void set_source_account_seq(::google::protobuf::int64 value);

  // optional int64 ledger_seq = 5;
  void clear_ledger_seq();
  static const int kLedgerSeqFieldNumber = 5;
  ::google::protobuf::int64 ledger_seq() const;
  void set_ledger_seq(::google::protobuf::int64 value);

  // optional int64 new_account_seq = 6;
  void clear_new_account_seq();
  static const int kNewAccountSeqFieldNumber = 6;
  ::google::protobuf::int64 new_account_seq() const;
  void set_new_account_seq(::google::protobuf::int64 value);

  // optional .protocol.ERRORCODE error_code = 7;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 7;
  ::protocol::ERRORCODE error_code() const;
  void set_error_code(::protocol::ERRORCODE value);

  // optional string error_desc = 8;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 8;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // optional int64 timestamp = 9;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainTxStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr source_address_;
  ::google::protobuf::int64 source_account_seq_;
  int status_;
  int error_code_;
  ::google::protobuf::int64 ledger_seq_;
  ::google::protobuf::int64 new_account_seq_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static ChainTxStatus* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelQueryDeposit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelQueryDeposit) */ {
 public:
  MessageChannelQueryDeposit();
  virtual ~MessageChannelQueryDeposit();

  MessageChannelQueryDeposit(const MessageChannelQueryDeposit& from);

  inline MessageChannelQueryDeposit& operator=(const MessageChannelQueryDeposit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelQueryDeposit& default_instance();

  void Swap(MessageChannelQueryDeposit* other);

  // implements Message ----------------------------------------------

  inline MessageChannelQueryDeposit* New() const { return New(NULL); }

  MessageChannelQueryDeposit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelQueryDeposit& from);
  void MergeFrom(const MessageChannelQueryDeposit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelQueryDeposit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelQueryDeposit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 seq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelQueryDeposit* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelHello) */ {
 public:
  MessageChannelHello();
  virtual ~MessageChannelHello();

  MessageChannelHello(const MessageChannelHello& from);

  inline MessageChannelHello& operator=(const MessageChannelHello& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelHello& default_instance();

  void Swap(MessageChannelHello* other);

  // implements Message ----------------------------------------------

  inline MessageChannelHello* New() const { return New(NULL); }

  MessageChannelHello* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelHello& from);
  void MergeFrom(const MessageChannelHello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 network_id = 1;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  ::google::protobuf::int64 network_id() const;
  void set_network_id(::google::protobuf::int64 value);

  // optional string node_address = 2;
  void clear_node_address();
  static const int kNodeAddressFieldNumber = 2;
  const ::std::string& node_address() const;
  void set_node_address(const ::std::string& value);
  void set_node_address(const char* value);
  void set_node_address(const char* value, size_t size);
  ::std::string* mutable_node_address();
  ::std::string* release_node_address();
  void set_allocated_node_address(::std::string* node_address);

  // optional int64 chain_id = 3;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 3;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional string round_string = 4;
  void clear_round_string();
  static const int kRoundStringFieldNumber = 4;
  const ::std::string& round_string() const;
  void set_round_string(const ::std::string& value);
  void set_round_string(const char* value);
  void set_round_string(const char* value, size_t size);
  ::std::string* mutable_round_string();
  ::std::string* release_round_string();
  void set_allocated_round_string(::std::string* round_string);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 network_id_;
  ::google::protobuf::internal::ArenaStringPtr node_address_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::internal::ArenaStringPtr round_string_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelHello* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelHelloResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelHelloResponse) */ {
 public:
  MessageChannelHelloResponse();
  virtual ~MessageChannelHelloResponse();

  MessageChannelHelloResponse(const MessageChannelHelloResponse& from);

  inline MessageChannelHelloResponse& operator=(const MessageChannelHelloResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelHelloResponse& default_instance();

  void Swap(MessageChannelHelloResponse* other);

  // implements Message ----------------------------------------------

  inline MessageChannelHelloResponse* New() const { return New(NULL); }

  MessageChannelHelloResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelHelloResponse& from);
  void MergeFrom(const MessageChannelHelloResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelHelloResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.ERRORCODE error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::protocol::ERRORCODE error_code() const;
  void set_error_code(::protocol::ERRORCODE value);

  // optional string error_desc = 2;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 2;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // optional .protocol.Signature round_signature = 3;
  bool has_round_signature() const;
  void clear_round_signature();
  static const int kRoundSignatureFieldNumber = 3;
  const ::protocol::Signature& round_signature() const;
  ::protocol::Signature* mutable_round_signature();
  ::protocol::Signature* release_round_signature();
  void set_allocated_round_signature(::protocol::Signature* round_signature);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelHelloResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  ::protocol::Signature* round_signature_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelHelloResponse* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannel) */ {
 public:
  MessageChannel();
  virtual ~MessageChannel();

  MessageChannel(const MessageChannel& from);

  inline MessageChannel& operator=(const MessageChannel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannel& default_instance();

  void Swap(MessageChannel* other);

  // implements Message ----------------------------------------------

  inline MessageChannel* New() const { return New(NULL); }

  MessageChannel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannel& from);
  void MergeFrom(const MessageChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 target_chain_id = 1;
  void clear_target_chain_id();
  static const int kTargetChainIdFieldNumber = 1;
  ::google::protobuf::int64 target_chain_id() const;
  void set_target_chain_id(::google::protobuf::int64 value);

  // optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::protocol::MESSAGE_CHANNEL_TYPE msg_type() const;
  void set_msg_type(::protocol::MESSAGE_CHANNEL_TYPE value);

  // optional bytes msg_data = 3;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 3;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 target_chain_id_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  int msg_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannel* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelResponse) */ {
 public:
  MessageChannelResponse();
  virtual ~MessageChannelResponse();

  MessageChannelResponse(const MessageChannelResponse& from);

  inline MessageChannelResponse& operator=(const MessageChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelResponse& default_instance();

  void Swap(MessageChannelResponse* other);

  // implements Message ----------------------------------------------

  inline MessageChannelResponse* New() const { return New(NULL); }

  MessageChannelResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelResponse& from);
  void MergeFrom(const MessageChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.ERRORCODE error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::protocol::ERRORCODE error_code() const;
  void set_error_code(::protocol::ERRORCODE value);

  // optional string error_desc = 2;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 2;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelProposer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelProposer) */ {
 public:
  MessageChannelProposer();
  virtual ~MessageChannelProposer();

  MessageChannelProposer(const MessageChannelProposer& from);

  inline MessageChannelProposer& operator=(const MessageChannelProposer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelProposer& default_instance();

  void Swap(MessageChannelProposer* other);

  // implements Message ----------------------------------------------

  inline MessageChannelProposer* New() const { return New(NULL); }

  MessageChannelProposer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelProposer& from);
  void MergeFrom(const MessageChannelProposer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelProposer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.LedgerHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::protocol::LedgerHeader& header() const;
  ::protocol::LedgerHeader* mutable_header();
  ::protocol::LedgerHeader* release_header();
  void set_allocated_header(::protocol::LedgerHeader* header);

  // optional string proposer_address = 2;
  void clear_proposer_address();
  static const int kProposerAddressFieldNumber = 2;
  const ::std::string& proposer_address() const;
  void set_proposer_address(const ::std::string& value);
  void set_proposer_address(const char* value);
  void set_proposer_address(const char* value, size_t size);
  ::std::string* mutable_proposer_address();
  ::std::string* release_proposer_address();
  void set_allocated_proposer_address(::std::string* proposer_address);

  // optional bytes proposer_signature = 3;
  void clear_proposer_signature();
  static const int kProposerSignatureFieldNumber = 3;
  const ::std::string& proposer_signature() const;
  void set_proposer_signature(const ::std::string& value);
  void set_proposer_signature(const char* value);
  void set_proposer_signature(const void* value, size_t size);
  ::std::string* mutable_proposer_signature();
  ::std::string* release_proposer_signature();
  void set_allocated_proposer_signature(::std::string* proposer_signature);

  // optional bytes header_hash = 4;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 4;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelProposer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::LedgerHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr proposer_address_;
  ::google::protobuf::internal::ArenaStringPtr proposer_signature_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelProposer* default_instance_;
};
// -------------------------------------------------------------------

class BlockReward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.BlockReward) */ {
 public:
  BlockReward();
  virtual ~BlockReward();

  BlockReward(const BlockReward& from);

  inline BlockReward& operator=(const BlockReward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockReward& default_instance();

  void Swap(BlockReward* other);

  // implements Message ----------------------------------------------

  inline BlockReward* New() const { return New(NULL); }

  BlockReward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockReward& from);
  void MergeFrom(const BlockReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockReward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 period = 2;
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  ::google::protobuf::int64 period() const;
  void set_period(::google::protobuf::int64 value);

  // optional double ratio = 3;
  void clear_ratio();
  static const int kRatioFieldNumber = 3;
  double ratio() const;
  void set_ratio(double value);

  // @@protoc_insertion_point(class_scope:protocol.BlockReward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 period_;
  double ratio_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static BlockReward* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelCreateChildChain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelCreateChildChain) */ {
 public:
  MessageChannelCreateChildChain();
  virtual ~MessageChannelCreateChildChain();

  MessageChannelCreateChildChain(const MessageChannelCreateChildChain& from);

  inline MessageChannelCreateChildChain& operator=(const MessageChannelCreateChildChain& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelCreateChildChain& default_instance();

  void Swap(MessageChannelCreateChildChain* other);

  // implements Message ----------------------------------------------

  inline MessageChannelCreateChildChain* New() const { return New(NULL); }

  MessageChannelCreateChildChain* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelCreateChildChain& from);
  void MergeFrom(const MessageChannelCreateChildChain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelCreateChildChain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string genesis_account = 1;
  void clear_genesis_account();
  static const int kGenesisAccountFieldNumber = 1;
  const ::std::string& genesis_account() const;
  void set_genesis_account(const ::std::string& value);
  void set_genesis_account(const char* value);
  void set_genesis_account(const char* value, size_t size);
  ::std::string* mutable_genesis_account();
  ::std::string* release_genesis_account();
  void set_allocated_genesis_account(::std::string* genesis_account);

  // optional string slogan = 2;
  void clear_slogan();
  static const int kSloganFieldNumber = 2;
  const ::std::string& slogan() const;
  void set_slogan(const ::std::string& value);
  void set_slogan(const char* value);
  void set_slogan(const char* value, size_t size);
  ::std::string* mutable_slogan();
  ::std::string* release_slogan();
  void set_allocated_slogan(::std::string* slogan);

  // optional .protocol.FeeConfig fee = 3;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  const ::protocol::FeeConfig& fee() const;
  ::protocol::FeeConfig* mutable_fee();
  ::protocol::FeeConfig* release_fee();
  void set_allocated_fee(::protocol::FeeConfig* fee);

  // repeated string reserve_validator = 4;
  int reserve_validator_size() const;
  void clear_reserve_validator();
  static const int kReserveValidatorFieldNumber = 4;
  const ::std::string& reserve_validator(int index) const;
  ::std::string* mutable_reserve_validator(int index);
  void set_reserve_validator(int index, const ::std::string& value);
  void set_reserve_validator(int index, const char* value);
  void set_reserve_validator(int index, const char* value, size_t size);
  ::std::string* add_reserve_validator();
  void add_reserve_validator(const ::std::string& value);
  void add_reserve_validator(const char* value);
  void add_reserve_validator(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reserve_validator() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reserve_validator();

  // optional string chain_name = 5;
  void clear_chain_name();
  static const int kChainNameFieldNumber = 5;
  const ::std::string& chain_name() const;
  void set_chain_name(const ::std::string& value);
  void set_chain_name(const char* value);
  void set_chain_name(const char* value, size_t size);
  ::std::string* mutable_chain_name();
  ::std::string* release_chain_name();
  void set_allocated_chain_name(::std::string* chain_name);

  // optional int64 chain_id = 6;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 6;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional string genesis_token_amount = 7;
  void clear_genesis_token_amount();
  static const int kGenesisTokenAmountFieldNumber = 7;
  const ::std::string& genesis_token_amount() const;
  void set_genesis_token_amount(const ::std::string& value);
  void set_genesis_token_amount(const char* value);
  void set_genesis_token_amount(const char* value, size_t size);
  ::std::string* mutable_genesis_token_amount();
  ::std::string* release_genesis_token_amount();
  void set_allocated_genesis_token_amount(::std::string* genesis_token_amount);

  // optional .protocol.BlockReward block_reward = 8;
  bool has_block_reward() const;
  void clear_block_reward();
  static const int kBlockRewardFieldNumber = 8;
  const ::protocol::BlockReward& block_reward() const;
  ::protocol::BlockReward* mutable_block_reward();
  ::protocol::BlockReward* release_block_reward();
  void set_allocated_block_reward(::protocol::BlockReward* block_reward);

  // optional int64 cost = 9;
  void clear_cost();
  static const int kCostFieldNumber = 9;
  ::google::protobuf::int64 cost() const;
  void set_cost(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelCreateChildChain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr genesis_account_;
  ::google::protobuf::internal::ArenaStringPtr slogan_;
  ::protocol::FeeConfig* fee_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reserve_validator_;
  ::google::protobuf::internal::ArenaStringPtr chain_name_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::internal::ArenaStringPtr genesis_token_amount_;
  ::protocol::BlockReward* block_reward_;
  ::google::protobuf::int64 cost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelCreateChildChain* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelChildGenesesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelChildGenesesRequest) */ {
 public:
  MessageChannelChildGenesesRequest();
  virtual ~MessageChannelChildGenesesRequest();

  MessageChannelChildGenesesRequest(const MessageChannelChildGenesesRequest& from);

  inline MessageChannelChildGenesesRequest& operator=(const MessageChannelChildGenesesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelChildGenesesRequest& default_instance();

  void Swap(MessageChannelChildGenesesRequest* other);

  // implements Message ----------------------------------------------

  inline MessageChannelChildGenesesRequest* New() const { return New(NULL); }

  MessageChannelChildGenesesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelChildGenesesRequest& from);
  void MergeFrom(const MessageChannelChildGenesesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelChildGenesesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelChildGenesesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelChildGenesesRequest* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelChildGenesesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelChildGenesesResponse) */ {
 public:
  MessageChannelChildGenesesResponse();
  virtual ~MessageChannelChildGenesesResponse();

  MessageChannelChildGenesesResponse(const MessageChannelChildGenesesResponse& from);

  inline MessageChannelChildGenesesResponse& operator=(const MessageChannelChildGenesesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelChildGenesesResponse& default_instance();

  void Swap(MessageChannelChildGenesesResponse* other);

  // implements Message ----------------------------------------------

  inline MessageChannelChildGenesesResponse* New() const { return New(NULL); }

  MessageChannelChildGenesesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelChildGenesesResponse& from);
  void MergeFrom(const MessageChannelChildGenesesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelChildGenesesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.ERRORCODE error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::protocol::ERRORCODE error_code() const;
  void set_error_code(::protocol::ERRORCODE value);

  // optional string error_desc = 2;
  void clear_error_desc();
  static const int kErrorDescFieldNumber = 2;
  const ::std::string& error_desc() const;
  void set_error_desc(const ::std::string& value);
  void set_error_desc(const char* value);
  void set_error_desc(const char* value, size_t size);
  ::std::string* mutable_error_desc();
  ::std::string* release_error_desc();
  void set_allocated_error_desc(::std::string* error_desc);

  // optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
  bool has_create_child_chain() const;
  void clear_create_child_chain();
  static const int kCreateChildChainFieldNumber = 3;
  const ::protocol::MessageChannelCreateChildChain& create_child_chain() const;
  ::protocol::MessageChannelCreateChildChain* mutable_create_child_chain();
  ::protocol::MessageChannelCreateChildChain* release_create_child_chain();
  void set_allocated_create_child_chain(::protocol::MessageChannelCreateChildChain* create_child_chain);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelChildGenesesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_desc_;
  ::protocol::MessageChannelCreateChildChain* create_child_chain_;
  int error_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelChildGenesesResponse* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelQueryHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelQueryHead) */ {
 public:
  MessageChannelQueryHead();
  virtual ~MessageChannelQueryHead();

  MessageChannelQueryHead(const MessageChannelQueryHead& from);

  inline MessageChannelQueryHead& operator=(const MessageChannelQueryHead& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelQueryHead& default_instance();

  void Swap(MessageChannelQueryHead* other);

  // implements Message ----------------------------------------------

  inline MessageChannelQueryHead* New() const { return New(NULL); }

  MessageChannelQueryHead* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelQueryHead& from);
  void MergeFrom(const MessageChannelQueryHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelQueryHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ledger_seq = 1;
  void clear_ledger_seq();
  static const int kLedgerSeqFieldNumber = 1;
  ::google::protobuf::int64 ledger_seq() const;
  void set_ledger_seq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelQueryHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 ledger_seq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelQueryHead* default_instance_;
};
// -------------------------------------------------------------------

class MerkelProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MerkelProof) */ {
 public:
  MerkelProof();
  virtual ~MerkelProof();

  MerkelProof(const MerkelProof& from);

  inline MerkelProof& operator=(const MerkelProof& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MerkelProof& default_instance();

  void Swap(MerkelProof* other);

  // implements Message ----------------------------------------------

  inline MerkelProof* New() const { return New(NULL); }

  MerkelProof* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MerkelProof& from);
  void MergeFrom(const MerkelProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MerkelProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes merkel_root = 1;
  void clear_merkel_root();
  static const int kMerkelRootFieldNumber = 1;
  const ::std::string& merkel_root() const;
  void set_merkel_root(const ::std::string& value);
  void set_merkel_root(const char* value);
  void set_merkel_root(const void* value, size_t size);
  ::std::string* mutable_merkel_root();
  ::std::string* release_merkel_root();
  void set_allocated_merkel_root(::std::string* merkel_root);

  // optional bytes merkel_path = 2;
  void clear_merkel_path();
  static const int kMerkelPathFieldNumber = 2;
  const ::std::string& merkel_path() const;
  void set_merkel_path(const ::std::string& value);
  void set_merkel_path(const char* value);
  void set_merkel_path(const void* value, size_t size);
  ::std::string* mutable_merkel_path();
  ::std::string* release_merkel_path();
  void set_allocated_merkel_path(::std::string* merkel_path);

  // optional .protocol.Transaction transaction = 3;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  const ::protocol::Transaction& transaction() const;
  ::protocol::Transaction* mutable_transaction();
  ::protocol::Transaction* release_transaction();
  void set_allocated_transaction(::protocol::Transaction* transaction);

  // @@protoc_insertion_point(class_scope:protocol.MerkelProof)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr merkel_root_;
  ::google::protobuf::internal::ArenaStringPtr merkel_path_;
  ::protocol::Transaction* transaction_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MerkelProof* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelDeposit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelDeposit) */ {
 public:
  MessageChannelDeposit();
  virtual ~MessageChannelDeposit();

  MessageChannelDeposit(const MessageChannelDeposit& from);

  inline MessageChannelDeposit& operator=(const MessageChannelDeposit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelDeposit& default_instance();

  void Swap(MessageChannelDeposit* other);

  // implements Message ----------------------------------------------

  inline MessageChannelDeposit* New() const { return New(NULL); }

  MessageChannelDeposit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelDeposit& from);
  void MergeFrom(const MessageChannelDeposit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelDeposit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // optional int64 block_number = 4;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 4;
  ::google::protobuf::int64 block_number() const;
  void set_block_number(::google::protobuf::int64 value);

  // optional string source_address = 5;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 5;
  const ::std::string& source_address() const;
  void set_source_address(const ::std::string& value);
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  ::std::string* mutable_source_address();
  ::std::string* release_source_address();
  void set_allocated_source_address(::std::string* source_address);

  // optional string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelDeposit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 seq_;
  ::google::protobuf::int64 block_number_;
  ::google::protobuf::internal::ArenaStringPtr source_address_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelDeposit* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelWithdrawal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelWithdrawal) */ {
 public:
  MessageChannelWithdrawal();
  virtual ~MessageChannelWithdrawal();

  MessageChannelWithdrawal(const MessageChannelWithdrawal& from);

  inline MessageChannelWithdrawal& operator=(const MessageChannelWithdrawal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelWithdrawal& default_instance();

  void Swap(MessageChannelWithdrawal* other);

  // implements Message ----------------------------------------------

  inline MessageChannelWithdrawal* New() const { return New(NULL); }

  MessageChannelWithdrawal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelWithdrawal& from);
  void MergeFrom(const MessageChannelWithdrawal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelWithdrawal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // optional bytes block_hash = 4;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 4;
  const ::std::string& block_hash() const;
  void set_block_hash(const ::std::string& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  ::std::string* mutable_block_hash();
  ::std::string* release_block_hash();
  void set_allocated_block_hash(::std::string* block_hash);

  // optional int64 block_seq = 5;
  void clear_block_seq();
  static const int kBlockSeqFieldNumber = 5;
  ::google::protobuf::int64 block_seq() const;
  void set_block_seq(::google::protobuf::int64 value);

  // optional string source_address = 6;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 6;
  const ::std::string& source_address() const;
  void set_source_address(const ::std::string& value);
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  ::std::string* mutable_source_address();
  ::std::string* release_source_address();
  void set_allocated_source_address(::std::string* source_address);

  // optional string address = 7;
  void clear_address();
  static const int kAddressFieldNumber = 7;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional .protocol.MerkelProof merkel_proof = 8;
  bool has_merkel_proof() const;
  void clear_merkel_proof();
  static const int kMerkelProofFieldNumber = 8;
  const ::protocol::MerkelProof& merkel_proof() const;
  ::protocol::MerkelProof* mutable_merkel_proof();
  ::protocol::MerkelProof* release_merkel_proof();
  void set_allocated_merkel_proof(::protocol::MerkelProof* merkel_proof);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelWithdrawal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 seq_;
  ::google::protobuf::internal::ArenaStringPtr block_hash_;
  ::google::protobuf::int64 block_seq_;
  ::google::protobuf::internal::ArenaStringPtr source_address_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::protocol::MerkelProof* merkel_proof_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelWithdrawal* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelWithdrawalChallenge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelWithdrawalChallenge) */ {
 public:
  MessageChannelWithdrawalChallenge();
  virtual ~MessageChannelWithdrawalChallenge();

  MessageChannelWithdrawalChallenge(const MessageChannelWithdrawalChallenge& from);

  inline MessageChannelWithdrawalChallenge& operator=(const MessageChannelWithdrawalChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelWithdrawalChallenge& default_instance();

  void Swap(MessageChannelWithdrawalChallenge* other);

  // implements Message ----------------------------------------------

  inline MessageChannelWithdrawalChallenge* New() const { return New(NULL); }

  MessageChannelWithdrawalChallenge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelWithdrawalChallenge& from);
  void MergeFrom(const MessageChannelWithdrawalChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelWithdrawalChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional int64 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // optional bytes block_hash = 4;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 4;
  const ::std::string& block_hash() const;
  void set_block_hash(const ::std::string& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  ::std::string* mutable_block_hash();
  ::std::string* release_block_hash();
  void set_allocated_block_hash(::std::string* block_hash);

  // optional string source_address = 5;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 5;
  const ::std::string& source_address() const;
  void set_source_address(const ::std::string& value);
  void set_source_address(const char* value);
  void set_source_address(const char* value, size_t size);
  ::std::string* mutable_source_address();
  ::std::string* release_source_address();
  void set_allocated_source_address(::std::string* source_address);

  // optional string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string main_source_address = 7;
  void clear_main_source_address();
  static const int kMainSourceAddressFieldNumber = 7;
  const ::std::string& main_source_address() const;
  void set_main_source_address(const ::std::string& value);
  void set_main_source_address(const char* value);
  void set_main_source_address(const char* value, size_t size);
  ::std::string* mutable_main_source_address();
  ::std::string* release_main_source_address();
  void set_allocated_main_source_address(::std::string* main_source_address);

  // optional int64 block_seq = 8;
  void clear_block_seq();
  static const int kBlockSeqFieldNumber = 8;
  ::google::protobuf::int64 block_seq() const;
  void set_block_seq(::google::protobuf::int64 value);

  // optional int64 state = 9;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // optional string merkel_proof = 10;
  void clear_merkel_proof();
  static const int kMerkelProofFieldNumber = 10;
  const ::std::string& merkel_proof() const;
  void set_merkel_proof(const ::std::string& value);
  void set_merkel_proof(const char* value);
  void set_merkel_proof(const char* value, size_t size);
  ::std::string* mutable_merkel_proof();
  ::std::string* release_merkel_proof();
  void set_allocated_merkel_proof(::std::string* merkel_proof);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelWithdrawalChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 seq_;
  ::google::protobuf::internal::ArenaStringPtr block_hash_;
  ::google::protobuf::internal::ArenaStringPtr source_address_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr main_source_address_;
  ::google::protobuf::int64 block_seq_;
  ::google::protobuf::int64 state_;
  ::google::protobuf::internal::ArenaStringPtr merkel_proof_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelWithdrawalChallenge* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelChangeChildValidator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelChangeChildValidator) */ {
 public:
  MessageChannelChangeChildValidator();
  virtual ~MessageChannelChangeChildValidator();

  MessageChannelChangeChildValidator(const MessageChannelChangeChildValidator& from);

  inline MessageChannelChangeChildValidator& operator=(const MessageChannelChangeChildValidator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelChangeChildValidator& default_instance();

  void Swap(MessageChannelChangeChildValidator* other);

  // implements Message ----------------------------------------------

  inline MessageChannelChangeChildValidator* New() const { return New(NULL); }

  MessageChannelChangeChildValidator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelChangeChildValidator& from);
  void MergeFrom(const MessageChannelChangeChildValidator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelChangeChildValidator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string main_chain_tx_hash = 1;
  void clear_main_chain_tx_hash();
  static const int kMainChainTxHashFieldNumber = 1;
  const ::std::string& main_chain_tx_hash() const;
  void set_main_chain_tx_hash(const ::std::string& value);
  void set_main_chain_tx_hash(const char* value);
  void set_main_chain_tx_hash(const char* value, size_t size);
  ::std::string* mutable_main_chain_tx_hash();
  ::std::string* release_main_chain_tx_hash();
  void set_allocated_main_chain_tx_hash(::std::string* main_chain_tx_hash);

  // optional string add_validator = 2;
  void clear_add_validator();
  static const int kAddValidatorFieldNumber = 2;
  const ::std::string& add_validator() const;
  void set_add_validator(const ::std::string& value);
  void set_add_validator(const char* value);
  void set_add_validator(const char* value, size_t size);
  ::std::string* mutable_add_validator();
  ::std::string* release_add_validator();
  void set_allocated_add_validator(::std::string* add_validator);

  // optional string delete_validator = 3;
  void clear_delete_validator();
  static const int kDeleteValidatorFieldNumber = 3;
  const ::std::string& delete_validator() const;
  void set_delete_validator(const ::std::string& value);
  void set_delete_validator(const char* value);
  void set_delete_validator(const char* value, size_t size);
  ::std::string* mutable_delete_validator();
  ::std::string* release_delete_validator();
  void set_allocated_delete_validator(::std::string* delete_validator);

  // optional string index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  const ::std::string& index() const;
  void set_index(const ::std::string& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  ::std::string* mutable_index();
  ::std::string* release_index();
  void set_allocated_index(::std::string* index);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelChangeChildValidator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr main_chain_tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr add_validator_;
  ::google::protobuf::internal::ArenaStringPtr delete_validator_;
  ::google::protobuf::internal::ArenaStringPtr index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelChangeChildValidator* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelQueryChangeChildValidator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelQueryChangeChildValidator) */ {
 public:
  MessageChannelQueryChangeChildValidator();
  virtual ~MessageChannelQueryChangeChildValidator();

  MessageChannelQueryChangeChildValidator(const MessageChannelQueryChangeChildValidator& from);

  inline MessageChannelQueryChangeChildValidator& operator=(const MessageChannelQueryChangeChildValidator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelQueryChangeChildValidator& default_instance();

  void Swap(MessageChannelQueryChangeChildValidator* other);

  // implements Message ----------------------------------------------

  inline MessageChannelQueryChangeChildValidator* New() const { return New(NULL); }

  MessageChannelQueryChangeChildValidator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelQueryChangeChildValidator& from);
  void MergeFrom(const MessageChannelQueryChangeChildValidator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelQueryChangeChildValidator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 change_child_index = 2;
  void clear_change_child_index();
  static const int kChangeChildIndexFieldNumber = 2;
  ::google::protobuf::int64 change_child_index() const;
  void set_change_child_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelQueryChangeChildValidator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 change_child_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelQueryChangeChildValidator* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelQuerySubmitHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelQuerySubmitHead) */ {
 public:
  MessageChannelQuerySubmitHead();
  virtual ~MessageChannelQuerySubmitHead();

  MessageChannelQuerySubmitHead(const MessageChannelQuerySubmitHead& from);

  inline MessageChannelQuerySubmitHead& operator=(const MessageChannelQuerySubmitHead& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelQuerySubmitHead& default_instance();

  void Swap(MessageChannelQuerySubmitHead* other);

  // implements Message ----------------------------------------------

  inline MessageChannelQuerySubmitHead* New() const { return New(NULL); }

  MessageChannelQuerySubmitHead* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelQuerySubmitHead& from);
  void MergeFrom(const MessageChannelQuerySubmitHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelQuerySubmitHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // optional bytes hash = 3;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelQuerySubmitHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 seq_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelQuerySubmitHead* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelSubmitHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelSubmitHead) */ {
 public:
  MessageChannelSubmitHead();
  virtual ~MessageChannelSubmitHead();

  MessageChannelSubmitHead(const MessageChannelSubmitHead& from);

  inline MessageChannelSubmitHead& operator=(const MessageChannelSubmitHead& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelSubmitHead& default_instance();

  void Swap(MessageChannelSubmitHead* other);

  // implements Message ----------------------------------------------

  inline MessageChannelSubmitHead* New() const { return New(NULL); }

  MessageChannelSubmitHead* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelSubmitHead& from);
  void MergeFrom(const MessageChannelSubmitHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelSubmitHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.LedgerHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::protocol::LedgerHeader& header() const;
  ::protocol::LedgerHeader* mutable_header();
  ::protocol::LedgerHeader* release_header();
  void set_allocated_header(::protocol::LedgerHeader* header);

  // optional int64 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelSubmitHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::LedgerHeader* header_;
  ::google::protobuf::int64 state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelSubmitHead* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelHandleWithdrawal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelHandleWithdrawal) */ {
 public:
  MessageChannelHandleWithdrawal();
  virtual ~MessageChannelHandleWithdrawal();

  MessageChannelHandleWithdrawal(const MessageChannelHandleWithdrawal& from);

  inline MessageChannelHandleWithdrawal& operator=(const MessageChannelHandleWithdrawal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelHandleWithdrawal& default_instance();

  void Swap(MessageChannelHandleWithdrawal* other);

  // implements Message ----------------------------------------------

  inline MessageChannelHandleWithdrawal* New() const { return New(NULL); }

  MessageChannelHandleWithdrawal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelHandleWithdrawal& from);
  void MergeFrom(const MessageChannelHandleWithdrawal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelHandleWithdrawal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.MessageChannelWithdrawalChallenge withdrawal = 1;
  bool has_withdrawal() const;
  void clear_withdrawal();
  static const int kWithdrawalFieldNumber = 1;
  const ::protocol::MessageChannelWithdrawalChallenge& withdrawal() const;
  ::protocol::MessageChannelWithdrawalChallenge* mutable_withdrawal();
  ::protocol::MessageChannelWithdrawalChallenge* release_withdrawal();
  void set_allocated_withdrawal(::protocol::MessageChannelWithdrawalChallenge* withdrawal);

  // optional int64 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelHandleWithdrawal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::MessageChannelWithdrawalChallenge* withdrawal_;
  ::google::protobuf::int64 state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelHandleWithdrawal* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelQueryWithdrawal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelQueryWithdrawal) */ {
 public:
  MessageChannelQueryWithdrawal();
  virtual ~MessageChannelQueryWithdrawal();

  MessageChannelQueryWithdrawal(const MessageChannelQueryWithdrawal& from);

  inline MessageChannelQueryWithdrawal& operator=(const MessageChannelQueryWithdrawal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelQueryWithdrawal& default_instance();

  void Swap(MessageChannelQueryWithdrawal* other);

  // implements Message ----------------------------------------------

  inline MessageChannelQueryWithdrawal* New() const { return New(NULL); }

  MessageChannelQueryWithdrawal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelQueryWithdrawal& from);
  void MergeFrom(const MessageChannelQueryWithdrawal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelQueryWithdrawal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional int64 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelQueryWithdrawal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::google::protobuf::int64 seq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelQueryWithdrawal* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelChildChallengeHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelChildChallengeHead) */ {
 public:
  MessageChannelChildChallengeHead();
  virtual ~MessageChannelChildChallengeHead();

  MessageChannelChildChallengeHead(const MessageChannelChildChallengeHead& from);

  inline MessageChannelChildChallengeHead& operator=(const MessageChannelChildChallengeHead& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelChildChallengeHead& default_instance();

  void Swap(MessageChannelChildChallengeHead* other);

  // implements Message ----------------------------------------------

  inline MessageChannelChildChallengeHead* New() const { return New(NULL); }

  MessageChannelChildChallengeHead* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelChildChallengeHead& from);
  void MergeFrom(const MessageChannelChildChallengeHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelChildChallengeHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::int64 chain_id() const;
  void set_chain_id(::google::protobuf::int64 value);

  // optional .protocol.MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE type() const;
  void set_type(::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE value);

  // optional .protocol.LedgerHeader cmc_head = 3;
  bool has_cmc_head() const;
  void clear_cmc_head();
  static const int kCmcHeadFieldNumber = 3;
  const ::protocol::LedgerHeader& cmc_head() const;
  ::protocol::LedgerHeader* mutable_cmc_head();
  ::protocol::LedgerHeader* release_cmc_head();
  void set_allocated_cmc_head(::protocol::LedgerHeader* cmc_head);

  // optional .protocol.LedgerHeader child_head = 4;
  bool has_child_head() const;
  void clear_child_head();
  static const int kChildHeadFieldNumber = 4;
  const ::protocol::LedgerHeader& child_head() const;
  ::protocol::LedgerHeader* mutable_child_head();
  ::protocol::LedgerHeader* release_child_head();
  void set_allocated_child_head(::protocol::LedgerHeader* child_head);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelChildChallengeHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 chain_id_;
  ::protocol::LedgerHeader* cmc_head_;
  ::protocol::LedgerHeader* child_head_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelChildChallengeHead* default_instance_;
};
// -------------------------------------------------------------------

class MessageChannelchildWithdrawalChallenge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.MessageChannelchildWithdrawalChallenge) */ {
 public:
  MessageChannelchildWithdrawalChallenge();
  virtual ~MessageChannelchildWithdrawalChallenge();

  MessageChannelchildWithdrawalChallenge(const MessageChannelchildWithdrawalChallenge& from);

  inline MessageChannelchildWithdrawalChallenge& operator=(const MessageChannelchildWithdrawalChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageChannelchildWithdrawalChallenge& default_instance();

  void Swap(MessageChannelchildWithdrawalChallenge* other);

  // implements Message ----------------------------------------------

  inline MessageChannelchildWithdrawalChallenge* New() const { return New(NULL); }

  MessageChannelchildWithdrawalChallenge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageChannelchildWithdrawalChallenge& from);
  void MergeFrom(const MessageChannelchildWithdrawalChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageChannelchildWithdrawalChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.MessageChannelWithdrawalChallenge withdrawal = 1;
  bool has_withdrawal() const;
  void clear_withdrawal();
  static const int kWithdrawalFieldNumber = 1;
  const ::protocol::MessageChannelWithdrawalChallenge& withdrawal() const;
  ::protocol::MessageChannelWithdrawalChallenge* mutable_withdrawal();
  ::protocol::MessageChannelWithdrawalChallenge* release_withdrawal();
  void set_allocated_withdrawal(::protocol::MessageChannelWithdrawalChallenge* withdrawal);

  // optional .protocol.MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE type() const;
  void set_type(::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE value);

  // optional .protocol.MerkelProof merkel_proof = 3;
  bool has_merkel_proof() const;
  void clear_merkel_proof();
  static const int kMerkelProofFieldNumber = 3;
  const ::protocol::MerkelProof& merkel_proof() const;
  ::protocol::MerkelProof* mutable_merkel_proof();
  ::protocol::MerkelProof* release_merkel_proof();
  void set_allocated_merkel_proof(::protocol::MerkelProof* merkel_proof);

  // @@protoc_insertion_point(class_scope:protocol.MessageChannelchildWithdrawalChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::MessageChannelWithdrawalChallenge* withdrawal_;
  ::protocol::MerkelProof* merkel_proof_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_overlay_2eproto();
  friend void protobuf_AssignDesc_overlay_2eproto();
  friend void protobuf_ShutdownFile_overlay_2eproto();

  void InitAsDefaultInstance();
  static MessageChannelchildWithdrawalChallenge* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Hello

// optional int64 network_id = 1;
inline void Hello::clear_network_id() {
  network_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hello::network_id() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.network_id)
  return network_id_;
}
inline void Hello::set_network_id(::google::protobuf::int64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.network_id)
}

// optional int64 ledger_version = 2;
inline void Hello::clear_ledger_version() {
  ledger_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hello::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.ledger_version)
  return ledger_version_;
}
inline void Hello::set_ledger_version(::google::protobuf::int64 value) {
  
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.ledger_version)
}

// optional int64 overlay_version = 3;
inline void Hello::clear_overlay_version() {
  overlay_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hello::overlay_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.overlay_version)
  return overlay_version_;
}
inline void Hello::set_overlay_version(::google::protobuf::int64 value) {
  
  overlay_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.overlay_version)
}

// optional string bumo_version = 4;
inline void Hello::clear_bumo_version() {
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hello::bumo_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.bumo_version)
  return bumo_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_bumo_version(const ::std::string& value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.bumo_version)
}
inline void Hello::set_bumo_version(const char* value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.bumo_version)
}
inline void Hello::set_bumo_version(const char* value, size_t size) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.bumo_version)
}
inline ::std::string* Hello::mutable_bumo_version() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.bumo_version)
  return bumo_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_bumo_version() {
  // @@protoc_insertion_point(field_release:protocol.Hello.bumo_version)
  
  return bumo_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_bumo_version(::std::string* bumo_version) {
  if (bumo_version != NULL) {
    
  } else {
    
  }
  bumo_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bumo_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.bumo_version)
}

// optional int64 listening_port = 5;
inline void Hello::clear_listening_port() {
  listening_port_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hello::listening_port() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.listening_port)
  return listening_port_;
}
inline void Hello::set_listening_port(::google::protobuf::int64 value) {
  
  listening_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.listening_port)
}

// optional string node_address = 6;
inline void Hello::clear_node_address() {
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hello::node_address() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.node_address)
  return node_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_node_address(const ::std::string& value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.node_address)
}
inline void Hello::set_node_address(const char* value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.node_address)
}
inline void Hello::set_node_address(const char* value, size_t size) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.node_address)
}
inline ::std::string* Hello::mutable_node_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.node_address)
  return node_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_node_address() {
  // @@protoc_insertion_point(field_release:protocol.Hello.node_address)
  
  return node_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_node_address(::std::string* node_address) {
  if (node_address != NULL) {
    
  } else {
    
  }
  node_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.node_address)
}

// optional string node_rand = 7;
inline void Hello::clear_node_rand() {
  node_rand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hello::node_rand() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.node_rand)
  return node_rand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_node_rand(const ::std::string& value) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.node_rand)
}
inline void Hello::set_node_rand(const char* value) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.node_rand)
}
inline void Hello::set_node_rand(const char* value, size_t size) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.node_rand)
}
inline ::std::string* Hello::mutable_node_rand() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.node_rand)
  return node_rand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_node_rand() {
  // @@protoc_insertion_point(field_release:protocol.Hello.node_rand)
  
  return node_rand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_node_rand(::std::string* node_rand) {
  if (node_rand != NULL) {
    
  } else {
    
  }
  node_rand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_rand);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.node_rand)
}

// -------------------------------------------------------------------

// HelloResponse

// optional .protocol.ERRORCODE error_code = 1;
inline void HelloResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::protocol::ERRORCODE HelloResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.HelloResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
inline void HelloResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.HelloResponse.error_code)
}

// optional string error_desc = 2;
inline void HelloResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.HelloResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.HelloResponse.error_desc)
}
inline void HelloResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.HelloResponse.error_desc)
}
inline void HelloResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.HelloResponse.error_desc)
}
inline ::std::string* HelloResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.HelloResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.HelloResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloResponse.error_desc)
}

// -------------------------------------------------------------------

// Peer

// optional string ip = 1;
inline void Peer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::ip() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Peer.ip)
}
inline void Peer::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Peer.ip)
}
inline void Peer::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Peer.ip)
}
inline ::std::string* Peer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Peer.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.Peer.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.Peer.ip)
}

// optional int64 port = 2;
inline void Peer::clear_port() {
  port_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Peer::port() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.port)
  return port_;
}
inline void Peer::set_port(::google::protobuf::int64 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.port)
}

// optional int64 num_failures = 3;
inline void Peer::clear_num_failures() {
  num_failures_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Peer::num_failures() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.num_failures)
  return num_failures_;
}
inline void Peer::set_num_failures(::google::protobuf::int64 value) {
  
  num_failures_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.num_failures)
}

// optional int64 next_attempt_time = 4;
inline void Peer::clear_next_attempt_time() {
  next_attempt_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Peer::next_attempt_time() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.next_attempt_time)
  return next_attempt_time_;
}
inline void Peer::set_next_attempt_time(::google::protobuf::int64 value) {
  
  next_attempt_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.next_attempt_time)
}

// optional int64 active_time = 5;
inline void Peer::clear_active_time() {
  active_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Peer::active_time() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.active_time)
  return active_time_;
}
inline void Peer::set_active_time(::google::protobuf::int64 value) {
  
  active_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.active_time)
}

// optional int64 connection_id = 6;
inline void Peer::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Peer::connection_id() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.connection_id)
  return connection_id_;
}
inline void Peer::set_connection_id(::google::protobuf::int64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.connection_id)
}

// -------------------------------------------------------------------

// Peers

// repeated .protocol.Peer peers = 1;
inline int Peers::peers_size() const {
  return peers_.size();
}
inline void Peers::clear_peers() {
  peers_.Clear();
}
inline const ::protocol::Peer& Peers::peers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Peers.peers)
  return peers_.Get(index);
}
inline ::protocol::Peer* Peers::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Peers.peers)
  return peers_.Mutable(index);
}
inline ::protocol::Peer* Peers::add_peers() {
  // @@protoc_insertion_point(field_add:protocol.Peers.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Peer >*
Peers::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Peers.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Peer >&
Peers::peers() const {
  // @@protoc_insertion_point(field_list:protocol.Peers.peers)
  return peers_;
}

// -------------------------------------------------------------------

// GetLedgers

// optional int64 begin = 1;
inline void GetLedgers::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetLedgers::begin() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.begin)
  return begin_;
}
inline void GetLedgers::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.begin)
}

// optional int64 end = 2;
inline void GetLedgers::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetLedgers::end() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.end)
  return end_;
}
inline void GetLedgers::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.end)
}

// optional int64 timestamp = 3;
inline void GetLedgers::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetLedgers::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.timestamp)
  return timestamp_;
}
inline void GetLedgers::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.timestamp)
}

// optional int64 chain_id = 4;
inline void GetLedgers::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetLedgers::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.chain_id)
  return chain_id_;
}
inline void GetLedgers::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.chain_id)
}

// -------------------------------------------------------------------

// Ledgers

// repeated .protocol.ConsensusValue values = 1;
inline int Ledgers::values_size() const {
  return values_.size();
}
inline void Ledgers::clear_values() {
  values_.Clear();
}
inline const ::protocol::ConsensusValue& Ledgers::values(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.values)
  return values_.Get(index);
}
inline ::protocol::ConsensusValue* Ledgers::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Ledgers.values)
  return values_.Mutable(index);
}
inline ::protocol::ConsensusValue* Ledgers::add_values() {
  // @@protoc_insertion_point(field_add:protocol.Ledgers.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >*
Ledgers::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Ledgers.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >&
Ledgers::values() const {
  // @@protoc_insertion_point(field_list:protocol.Ledgers.values)
  return values_;
}

// optional .protocol.Ledgers.SyncCode sync_code = 2;
inline void Ledgers::clear_sync_code() {
  sync_code_ = 0;
}
inline ::protocol::Ledgers_SyncCode Ledgers::sync_code() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.sync_code)
  return static_cast< ::protocol::Ledgers_SyncCode >(sync_code_);
}
inline void Ledgers::set_sync_code(::protocol::Ledgers_SyncCode value) {
  
  sync_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.sync_code)
}

// optional int64 max_seq = 3;
inline void Ledgers::clear_max_seq() {
  max_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ledgers::max_seq() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.max_seq)
  return max_seq_;
}
inline void Ledgers::set_max_seq(::google::protobuf::int64 value) {
  
  max_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.max_seq)
}

// optional bytes proof = 4;
inline void Ledgers::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ledgers::proof() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.proof)
  return proof_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ledgers::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Ledgers.proof)
}
inline void Ledgers::set_proof(const char* value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Ledgers.proof)
}
inline void Ledgers::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Ledgers.proof)
}
inline ::std::string* Ledgers::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Ledgers.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ledgers::release_proof() {
  // @@protoc_insertion_point(field_release:protocol.Ledgers.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ledgers::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:protocol.Ledgers.proof)
}

// optional int64 chain_id = 5;
inline void Ledgers::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ledgers::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.chain_id)
  return chain_id_;
}
inline void Ledgers::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.chain_id)
}

// -------------------------------------------------------------------

// DontHave

// optional int64 type = 1;
inline void DontHave::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DontHave::type() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.type)
  return type_;
}
inline void DontHave::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.DontHave.type)
}

// optional bytes hash = 2;
inline void DontHave::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DontHave::hash() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DontHave::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DontHave.hash)
}
inline void DontHave::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DontHave.hash)
}
inline void DontHave::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DontHave.hash)
}
inline ::std::string* DontHave::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DontHave.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DontHave::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.DontHave.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DontHave::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.DontHave.hash)
}

// -------------------------------------------------------------------

// LedgerUpgradeNotify

// optional int64 nonce = 1;
inline void LedgerUpgradeNotify::clear_nonce() {
  nonce_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LedgerUpgradeNotify::nonce() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.nonce)
  return nonce_;
}
inline void LedgerUpgradeNotify::set_nonce(::google::protobuf::int64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerUpgradeNotify.nonce)
}

// optional .protocol.LedgerUpgrade upgrade = 2;
inline bool LedgerUpgradeNotify::has_upgrade() const {
  return !_is_default_instance_ && upgrade_ != NULL;
}
inline void LedgerUpgradeNotify::clear_upgrade() {
  if (GetArenaNoVirtual() == NULL && upgrade_ != NULL) delete upgrade_;
  upgrade_ = NULL;
}
inline const ::protocol::LedgerUpgrade& LedgerUpgradeNotify::upgrade() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.upgrade)
  return upgrade_ != NULL ? *upgrade_ : *default_instance_->upgrade_;
}
inline ::protocol::LedgerUpgrade* LedgerUpgradeNotify::mutable_upgrade() {
  
  if (upgrade_ == NULL) {
    upgrade_ = new ::protocol::LedgerUpgrade;
  }
  // @@protoc_insertion_point(field_mutable:protocol.LedgerUpgradeNotify.upgrade)
  return upgrade_;
}
inline ::protocol::LedgerUpgrade* LedgerUpgradeNotify::release_upgrade() {
  // @@protoc_insertion_point(field_release:protocol.LedgerUpgradeNotify.upgrade)
  
  ::protocol::LedgerUpgrade* temp = upgrade_;
  upgrade_ = NULL;
  return temp;
}
inline void LedgerUpgradeNotify::set_allocated_upgrade(::protocol::LedgerUpgrade* upgrade) {
  delete upgrade_;
  upgrade_ = upgrade;
  if (upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerUpgradeNotify.upgrade)
}

// optional .protocol.Signature signature = 3;
inline bool LedgerUpgradeNotify::has_signature() const {
  return !_is_default_instance_ && signature_ != NULL;
}
inline void LedgerUpgradeNotify::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
inline const ::protocol::Signature& LedgerUpgradeNotify::signature() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::protocol::Signature* LedgerUpgradeNotify::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.LedgerUpgradeNotify.signature)
  return signature_;
}
inline ::protocol::Signature* LedgerUpgradeNotify::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.LedgerUpgradeNotify.signature)
  
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void LedgerUpgradeNotify::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerUpgradeNotify.signature)
}

// -------------------------------------------------------------------

// EntryList

// repeated bytes entry = 1;
inline int EntryList::entry_size() const {
  return entry_.size();
}
inline void EntryList::clear_entry() {
  entry_.Clear();
}
inline const ::std::string& EntryList::entry(int index) const {
  // @@protoc_insertion_point(field_get:protocol.EntryList.entry)
  return entry_.Get(index);
}
inline ::std::string* EntryList::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.EntryList.entry)
  return entry_.Mutable(index);
}
inline void EntryList::set_entry(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.EntryList.entry)
  entry_.Mutable(index)->assign(value);
}
inline void EntryList::set_entry(int index, const char* value) {
  entry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.EntryList.entry)
}
inline void EntryList::set_entry(int index, const void* value, size_t size) {
  entry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.EntryList.entry)
}
inline ::std::string* EntryList::add_entry() {
  // @@protoc_insertion_point(field_add_mutable:protocol.EntryList.entry)
  return entry_.Add();
}
inline void EntryList::add_entry(const ::std::string& value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.EntryList.entry)
}
inline void EntryList::add_entry(const char* value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.EntryList.entry)
}
inline void EntryList::add_entry(const void* value, size_t size) {
  entry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.EntryList.entry)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryList::entry() const {
  // @@protoc_insertion_point(field_list:protocol.EntryList.entry)
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryList::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:protocol.EntryList.entry)
  return &entry_;
}

// -------------------------------------------------------------------

// ChainHello

// repeated .protocol.ChainMessageType api_list = 1;
inline int ChainHello::api_list_size() const {
  return api_list_.size();
}
inline void ChainHello::clear_api_list() {
  api_list_.Clear();
}
inline ::protocol::ChainMessageType ChainHello::api_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.api_list)
  return static_cast< ::protocol::ChainMessageType >(api_list_.Get(index));
}
inline void ChainHello::set_api_list(int index, ::protocol::ChainMessageType value) {
  api_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.ChainHello.api_list)
}
inline void ChainHello::add_api_list(::protocol::ChainMessageType value) {
  api_list_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.ChainHello.api_list)
}
inline const ::google::protobuf::RepeatedField<int>&
ChainHello::api_list() const {
  // @@protoc_insertion_point(field_list:protocol.ChainHello.api_list)
  return api_list_;
}
inline ::google::protobuf::RepeatedField<int>*
ChainHello::mutable_api_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainHello.api_list)
  return &api_list_;
}

// optional int64 timestamp = 2;
inline void ChainHello::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainHello::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.timestamp)
  return timestamp_;
}
inline void ChainHello::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainHello.timestamp)
}

// -------------------------------------------------------------------

// ChainStatus

// optional string self_addr = 1;
inline void ChainStatus::clear_self_addr() {
  self_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainStatus::self_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.self_addr)
  return self_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainStatus::set_self_addr(const ::std::string& value) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.self_addr)
}
inline void ChainStatus::set_self_addr(const char* value) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.self_addr)
}
inline void ChainStatus::set_self_addr(const char* value, size_t size) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.self_addr)
}
inline ::std::string* ChainStatus::mutable_self_addr() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.self_addr)
  return self_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainStatus::release_self_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.self_addr)
  
  return self_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainStatus::set_allocated_self_addr(::std::string* self_addr) {
  if (self_addr != NULL) {
    
  } else {
    
  }
  self_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.self_addr)
}

// optional int64 ledger_version = 2;
inline void ChainStatus::clear_ledger_version() {
  ledger_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainStatus::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.ledger_version)
  return ledger_version_;
}
inline void ChainStatus::set_ledger_version(::google::protobuf::int64 value) {
  
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.ledger_version)
}

// optional int64 monitor_version = 3;
inline void ChainStatus::clear_monitor_version() {
  monitor_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainStatus::monitor_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.monitor_version)
  return monitor_version_;
}
inline void ChainStatus::set_monitor_version(::google::protobuf::int64 value) {
  
  monitor_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.monitor_version)
}

// optional string bumo_version = 4;
inline void ChainStatus::clear_bumo_version() {
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainStatus::bumo_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.bumo_version)
  return bumo_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainStatus::set_bumo_version(const ::std::string& value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.bumo_version)
}
inline void ChainStatus::set_bumo_version(const char* value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.bumo_version)
}
inline void ChainStatus::set_bumo_version(const char* value, size_t size) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.bumo_version)
}
inline ::std::string* ChainStatus::mutable_bumo_version() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.bumo_version)
  return bumo_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainStatus::release_bumo_version() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.bumo_version)
  
  return bumo_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainStatus::set_allocated_bumo_version(::std::string* bumo_version) {
  if (bumo_version != NULL) {
    
  } else {
    
  }
  bumo_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bumo_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.bumo_version)
}

// optional int64 timestamp = 5;
inline void ChainStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.timestamp)
  return timestamp_;
}
inline void ChainStatus::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.timestamp)
}

// -------------------------------------------------------------------

// ChainPeerMessage

// optional string src_peer_addr = 1;
inline void ChainPeerMessage::clear_src_peer_addr() {
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainPeerMessage::src_peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainPeerMessage::set_src_peer_addr(const ::std::string& value) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.src_peer_addr)
}
inline void ChainPeerMessage::set_src_peer_addr(const char* value) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.src_peer_addr)
}
inline void ChainPeerMessage::set_src_peer_addr(const char* value, size_t size) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.src_peer_addr)
}
inline ::std::string* ChainPeerMessage::mutable_src_peer_addr() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainPeerMessage::release_src_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.src_peer_addr)
  
  return src_peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainPeerMessage::set_allocated_src_peer_addr(::std::string* src_peer_addr) {
  if (src_peer_addr != NULL) {
    
  } else {
    
  }
  src_peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.src_peer_addr)
}

// repeated string des_peer_addrs = 2;
inline int ChainPeerMessage::des_peer_addrs_size() const {
  return des_peer_addrs_.size();
}
inline void ChainPeerMessage::clear_des_peer_addrs() {
  des_peer_addrs_.Clear();
}
inline const ::std::string& ChainPeerMessage::des_peer_addrs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Get(index);
}
inline ::std::string* ChainPeerMessage::mutable_des_peer_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Mutable(index);
}
inline void ChainPeerMessage::set_des_peer_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(value);
}
inline void ChainPeerMessage::set_des_peer_addrs(int index, const char* value) {
  des_peer_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.des_peer_addrs)
}
inline void ChainPeerMessage::set_des_peer_addrs(int index, const char* value, size_t size) {
  des_peer_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
inline ::std::string* ChainPeerMessage::add_des_peer_addrs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Add();
}
inline void ChainPeerMessage::add_des_peer_addrs(const ::std::string& value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.ChainPeerMessage.des_peer_addrs)
}
inline void ChainPeerMessage::add_des_peer_addrs(const char* value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.ChainPeerMessage.des_peer_addrs)
}
inline void ChainPeerMessage::add_des_peer_addrs(const char* value, size_t size) {
  des_peer_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChainPeerMessage::des_peer_addrs() const {
  // @@protoc_insertion_point(field_list:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChainPeerMessage::mutable_des_peer_addrs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainPeerMessage.des_peer_addrs)
  return &des_peer_addrs_;
}

// optional bytes data = 3;
inline void ChainPeerMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainPeerMessage::data() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainPeerMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.data)
}
inline void ChainPeerMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.data)
}
inline void ChainPeerMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.data)
}
inline ::std::string* ChainPeerMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainPeerMessage::release_data() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainPeerMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.data)
}

// -------------------------------------------------------------------

// ChainSubscribeTx

// repeated string address = 1;
inline int ChainSubscribeTx::address_size() const {
  return address_.size();
}
inline void ChainSubscribeTx::clear_address() {
  address_.Clear();
}
inline const ::std::string& ChainSubscribeTx::address(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainSubscribeTx.address)
  return address_.Get(index);
}
inline ::std::string* ChainSubscribeTx::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainSubscribeTx.address)
  return address_.Mutable(index);
}
inline void ChainSubscribeTx::set_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainSubscribeTx.address)
  address_.Mutable(index)->assign(value);
}
inline void ChainSubscribeTx::set_address(int index, const char* value) {
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.ChainSubscribeTx.address)
}
inline void ChainSubscribeTx::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainSubscribeTx.address)
}
inline ::std::string* ChainSubscribeTx::add_address() {
  // @@protoc_insertion_point(field_add_mutable:protocol.ChainSubscribeTx.address)
  return address_.Add();
}
inline void ChainSubscribeTx::add_address(const ::std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.ChainSubscribeTx.address)
}
inline void ChainSubscribeTx::add_address(const char* value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.ChainSubscribeTx.address)
}
inline void ChainSubscribeTx::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.ChainSubscribeTx.address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChainSubscribeTx::address() const {
  // @@protoc_insertion_point(field_list:protocol.ChainSubscribeTx.address)
  return address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChainSubscribeTx::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainSubscribeTx.address)
  return &address_;
}

// -------------------------------------------------------------------

// ChainResponse

// optional int32 error_code = 1;
inline void ChainResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 ChainResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.ChainResponse.error_code)
  return error_code_;
}
inline void ChainResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainResponse.error_code)
}

// optional string error_desc = 2;
inline void ChainResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.ChainResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainResponse.error_desc)
}
inline void ChainResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainResponse.error_desc)
}
inline void ChainResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainResponse.error_desc)
}
inline ::std::string* ChainResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.ChainResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainResponse.error_desc)
}

// -------------------------------------------------------------------

// ChainTxStatus

// optional .protocol.ChainTxStatus.TxStatus status = 1;
inline void ChainTxStatus::clear_status() {
  status_ = 0;
}
inline ::protocol::ChainTxStatus_TxStatus ChainTxStatus::status() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.status)
  return static_cast< ::protocol::ChainTxStatus_TxStatus >(status_);
}
inline void ChainTxStatus::set_status(::protocol::ChainTxStatus_TxStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.status)
}

// optional string tx_hash = 2;
inline void ChainTxStatus::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainTxStatus::tx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.tx_hash)
}
inline void ChainTxStatus::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.tx_hash)
}
inline void ChainTxStatus::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.tx_hash)
}
inline ::std::string* ChainTxStatus::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainTxStatus::release_tx_hash() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.tx_hash)
}

// optional string source_address = 3;
inline void ChainTxStatus::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainTxStatus::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_address)
}
inline void ChainTxStatus::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.source_address)
}
inline void ChainTxStatus::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.source_address)
}
inline ::std::string* ChainTxStatus::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainTxStatus::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.source_address)
}

// optional int64 source_account_seq = 4;
inline void ChainTxStatus::clear_source_account_seq() {
  source_account_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainTxStatus::source_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_account_seq)
  return source_account_seq_;
}
inline void ChainTxStatus::set_source_account_seq(::google::protobuf::int64 value) {
  
  source_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_account_seq)
}

// optional int64 ledger_seq = 5;
inline void ChainTxStatus::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainTxStatus::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.ledger_seq)
  return ledger_seq_;
}
inline void ChainTxStatus::set_ledger_seq(::google::protobuf::int64 value) {
  
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.ledger_seq)
}

// optional int64 new_account_seq = 6;
inline void ChainTxStatus::clear_new_account_seq() {
  new_account_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainTxStatus::new_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.new_account_seq)
  return new_account_seq_;
}
inline void ChainTxStatus::set_new_account_seq(::google::protobuf::int64 value) {
  
  new_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.new_account_seq)
}

// optional .protocol.ERRORCODE error_code = 7;
inline void ChainTxStatus::clear_error_code() {
  error_code_ = 0;
}
inline ::protocol::ERRORCODE ChainTxStatus::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
inline void ChainTxStatus::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_code)
}

// optional string error_desc = 8;
inline void ChainTxStatus::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChainTxStatus::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_desc)
}
inline void ChainTxStatus::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.error_desc)
}
inline void ChainTxStatus::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.error_desc)
}
inline ::std::string* ChainTxStatus::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainTxStatus::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainTxStatus::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.error_desc)
}

// optional int64 timestamp = 9;
inline void ChainTxStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChainTxStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.timestamp)
  return timestamp_;
}
inline void ChainTxStatus::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.timestamp)
}

// -------------------------------------------------------------------

// MessageChannelQueryDeposit

// optional int64 chain_id = 1;
inline void MessageChannelQueryDeposit::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryDeposit::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryDeposit.chain_id)
  return chain_id_;
}
inline void MessageChannelQueryDeposit::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryDeposit.chain_id)
}

// optional int64 seq = 2;
inline void MessageChannelQueryDeposit::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryDeposit::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryDeposit.seq)
  return seq_;
}
inline void MessageChannelQueryDeposit::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryDeposit.seq)
}

// -------------------------------------------------------------------

// MessageChannelHello

// optional int64 network_id = 1;
inline void MessageChannelHello::clear_network_id() {
  network_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelHello::network_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.network_id)
  return network_id_;
}
inline void MessageChannelHello::set_network_id(::google::protobuf::int64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.network_id)
}

// optional string node_address = 2;
inline void MessageChannelHello::clear_node_address() {
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelHello::node_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.node_address)
  return node_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHello::set_node_address(const ::std::string& value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.node_address)
}
inline void MessageChannelHello::set_node_address(const char* value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelHello.node_address)
}
inline void MessageChannelHello::set_node_address(const char* value, size_t size) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelHello.node_address)
}
inline ::std::string* MessageChannelHello::mutable_node_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHello.node_address)
  return node_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelHello::release_node_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHello.node_address)
  
  return node_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHello::set_allocated_node_address(::std::string* node_address) {
  if (node_address != NULL) {
    
  } else {
    
  }
  node_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHello.node_address)
}

// optional int64 chain_id = 3;
inline void MessageChannelHello::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelHello::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.chain_id)
  return chain_id_;
}
inline void MessageChannelHello::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.chain_id)
}

// optional string round_string = 4;
inline void MessageChannelHello::clear_round_string() {
  round_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelHello::round_string() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.round_string)
  return round_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHello::set_round_string(const ::std::string& value) {
  
  round_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.round_string)
}
inline void MessageChannelHello::set_round_string(const char* value) {
  
  round_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelHello.round_string)
}
inline void MessageChannelHello::set_round_string(const char* value, size_t size) {
  
  round_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelHello.round_string)
}
inline ::std::string* MessageChannelHello::mutable_round_string() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHello.round_string)
  return round_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelHello::release_round_string() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHello.round_string)
  
  return round_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHello::set_allocated_round_string(::std::string* round_string) {
  if (round_string != NULL) {
    
  } else {
    
  }
  round_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), round_string);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHello.round_string)
}

// -------------------------------------------------------------------

// MessageChannelHelloResponse

// optional .protocol.ERRORCODE error_code = 1;
inline void MessageChannelHelloResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::protocol::ERRORCODE MessageChannelHelloResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHelloResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
inline void MessageChannelHelloResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHelloResponse.error_code)
}

// optional string error_desc = 2;
inline void MessageChannelHelloResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelHelloResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHelloResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHelloResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHelloResponse.error_desc)
}
inline void MessageChannelHelloResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelHelloResponse.error_desc)
}
inline void MessageChannelHelloResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelHelloResponse.error_desc)
}
inline ::std::string* MessageChannelHelloResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHelloResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelHelloResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHelloResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelHelloResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHelloResponse.error_desc)
}

// optional .protocol.Signature round_signature = 3;
inline bool MessageChannelHelloResponse::has_round_signature() const {
  return !_is_default_instance_ && round_signature_ != NULL;
}
inline void MessageChannelHelloResponse::clear_round_signature() {
  if (GetArenaNoVirtual() == NULL && round_signature_ != NULL) delete round_signature_;
  round_signature_ = NULL;
}
inline const ::protocol::Signature& MessageChannelHelloResponse::round_signature() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHelloResponse.round_signature)
  return round_signature_ != NULL ? *round_signature_ : *default_instance_->round_signature_;
}
inline ::protocol::Signature* MessageChannelHelloResponse::mutable_round_signature() {
  
  if (round_signature_ == NULL) {
    round_signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHelloResponse.round_signature)
  return round_signature_;
}
inline ::protocol::Signature* MessageChannelHelloResponse::release_round_signature() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHelloResponse.round_signature)
  
  ::protocol::Signature* temp = round_signature_;
  round_signature_ = NULL;
  return temp;
}
inline void MessageChannelHelloResponse::set_allocated_round_signature(::protocol::Signature* round_signature) {
  delete round_signature_;
  round_signature_ = round_signature;
  if (round_signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHelloResponse.round_signature)
}

// -------------------------------------------------------------------

// MessageChannel

// optional int64 target_chain_id = 1;
inline void MessageChannel::clear_target_chain_id() {
  target_chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannel::target_chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.target_chain_id)
  return target_chain_id_;
}
inline void MessageChannel::set_target_chain_id(::google::protobuf::int64 value) {
  
  target_chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.target_chain_id)
}

// optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
inline void MessageChannel::clear_msg_type() {
  msg_type_ = 0;
}
inline ::protocol::MESSAGE_CHANNEL_TYPE MessageChannel::msg_type() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.msg_type)
  return static_cast< ::protocol::MESSAGE_CHANNEL_TYPE >(msg_type_);
}
inline void MessageChannel::set_msg_type(::protocol::MESSAGE_CHANNEL_TYPE value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.msg_type)
}

// optional bytes msg_data = 3;
inline void MessageChannel::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannel::msg_data() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannel::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.msg_data)
}
inline void MessageChannel::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannel.msg_data)
}
inline void MessageChannel::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannel.msg_data)
}
inline ::std::string* MessageChannel::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannel.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannel::release_msg_data() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannel.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannel::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannel.msg_data)
}

// -------------------------------------------------------------------

// MessageChannelResponse

// optional .protocol.ERRORCODE error_code = 1;
inline void MessageChannelResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::protocol::ERRORCODE MessageChannelResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
inline void MessageChannelResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelResponse.error_code)
}

// optional string error_desc = 2;
inline void MessageChannelResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelResponse.error_desc)
}
inline void MessageChannelResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelResponse.error_desc)
}
inline void MessageChannelResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelResponse.error_desc)
}
inline ::std::string* MessageChannelResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelResponse.error_desc)
}

// -------------------------------------------------------------------

// MessageChannelProposer

// optional .protocol.LedgerHeader header = 1;
inline bool MessageChannelProposer::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void MessageChannelProposer::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::protocol::LedgerHeader& MessageChannelProposer::header() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::protocol::LedgerHeader* MessageChannelProposer::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.header)
  return header_;
}
inline ::protocol::LedgerHeader* MessageChannelProposer::release_header() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.header)
  
  ::protocol::LedgerHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MessageChannelProposer::set_allocated_header(::protocol::LedgerHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.header)
}

// optional string proposer_address = 2;
inline void MessageChannelProposer::clear_proposer_address() {
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelProposer::proposer_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.proposer_address)
  return proposer_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_proposer_address(const ::std::string& value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.proposer_address)
}
inline void MessageChannelProposer::set_proposer_address(const char* value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.proposer_address)
}
inline void MessageChannelProposer::set_proposer_address(const char* value, size_t size) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.proposer_address)
}
inline ::std::string* MessageChannelProposer::mutable_proposer_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.proposer_address)
  return proposer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelProposer::release_proposer_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.proposer_address)
  
  return proposer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_allocated_proposer_address(::std::string* proposer_address) {
  if (proposer_address != NULL) {
    
  } else {
    
  }
  proposer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.proposer_address)
}

// optional bytes proposer_signature = 3;
inline void MessageChannelProposer::clear_proposer_signature() {
  proposer_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelProposer::proposer_signature() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.proposer_signature)
  return proposer_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_proposer_signature(const ::std::string& value) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.proposer_signature)
}
inline void MessageChannelProposer::set_proposer_signature(const char* value) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.proposer_signature)
}
inline void MessageChannelProposer::set_proposer_signature(const void* value, size_t size) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.proposer_signature)
}
inline ::std::string* MessageChannelProposer::mutable_proposer_signature() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.proposer_signature)
  return proposer_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelProposer::release_proposer_signature() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.proposer_signature)
  
  return proposer_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_allocated_proposer_signature(::std::string* proposer_signature) {
  if (proposer_signature != NULL) {
    
  } else {
    
  }
  proposer_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.proposer_signature)
}

// optional bytes header_hash = 4;
inline void MessageChannelProposer::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelProposer::header_hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.header_hash)
  return header_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_header_hash(const ::std::string& value) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.header_hash)
}
inline void MessageChannelProposer::set_header_hash(const char* value) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.header_hash)
}
inline void MessageChannelProposer::set_header_hash(const void* value, size_t size) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.header_hash)
}
inline ::std::string* MessageChannelProposer::mutable_header_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelProposer::release_header_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.header_hash)
  
  return header_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelProposer::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    
  } else {
    
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.header_hash)
}

// -------------------------------------------------------------------

// BlockReward

// optional int64 amount = 1;
inline void BlockReward::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockReward::amount() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.amount)
  return amount_;
}
inline void BlockReward::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.amount)
}

// optional int64 period = 2;
inline void BlockReward::clear_period() {
  period_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockReward::period() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.period)
  return period_;
}
inline void BlockReward::set_period(::google::protobuf::int64 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.period)
}

// optional double ratio = 3;
inline void BlockReward::clear_ratio() {
  ratio_ = 0;
}
inline double BlockReward::ratio() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.ratio)
  return ratio_;
}
inline void BlockReward::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.ratio)
}

// -------------------------------------------------------------------

// MessageChannelCreateChildChain

// optional string genesis_account = 1;
inline void MessageChannelCreateChildChain::clear_genesis_account() {
  genesis_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelCreateChildChain::genesis_account() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.genesis_account)
  return genesis_account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_genesis_account(const ::std::string& value) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.genesis_account)
}
inline void MessageChannelCreateChildChain::set_genesis_account(const char* value) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.genesis_account)
}
inline void MessageChannelCreateChildChain::set_genesis_account(const char* value, size_t size) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.genesis_account)
}
inline ::std::string* MessageChannelCreateChildChain::mutable_genesis_account() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.genesis_account)
  return genesis_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelCreateChildChain::release_genesis_account() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.genesis_account)
  
  return genesis_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_allocated_genesis_account(::std::string* genesis_account) {
  if (genesis_account != NULL) {
    
  } else {
    
  }
  genesis_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genesis_account);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.genesis_account)
}

// optional string slogan = 2;
inline void MessageChannelCreateChildChain::clear_slogan() {
  slogan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelCreateChildChain::slogan() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.slogan)
  return slogan_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_slogan(const ::std::string& value) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.slogan)
}
inline void MessageChannelCreateChildChain::set_slogan(const char* value) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.slogan)
}
inline void MessageChannelCreateChildChain::set_slogan(const char* value, size_t size) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.slogan)
}
inline ::std::string* MessageChannelCreateChildChain::mutable_slogan() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.slogan)
  return slogan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelCreateChildChain::release_slogan() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.slogan)
  
  return slogan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_allocated_slogan(::std::string* slogan) {
  if (slogan != NULL) {
    
  } else {
    
  }
  slogan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slogan);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.slogan)
}

// optional .protocol.FeeConfig fee = 3;
inline bool MessageChannelCreateChildChain::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
inline void MessageChannelCreateChildChain::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::protocol::FeeConfig& MessageChannelCreateChildChain::fee() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
inline ::protocol::FeeConfig* MessageChannelCreateChildChain::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::protocol::FeeConfig;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.fee)
  return fee_;
}
inline ::protocol::FeeConfig* MessageChannelCreateChildChain::release_fee() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.fee)
  
  ::protocol::FeeConfig* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void MessageChannelCreateChildChain::set_allocated_fee(::protocol::FeeConfig* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.fee)
}

// repeated string reserve_validator = 4;
inline int MessageChannelCreateChildChain::reserve_validator_size() const {
  return reserve_validator_.size();
}
inline void MessageChannelCreateChildChain::clear_reserve_validator() {
  reserve_validator_.Clear();
}
inline const ::std::string& MessageChannelCreateChildChain::reserve_validator(int index) const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Get(index);
}
inline ::std::string* MessageChannelCreateChildChain::mutable_reserve_validator(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Mutable(index);
}
inline void MessageChannelCreateChildChain::set_reserve_validator(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.reserve_validator)
  reserve_validator_.Mutable(index)->assign(value);
}
inline void MessageChannelCreateChildChain::set_reserve_validator(int index, const char* value) {
  reserve_validator_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.reserve_validator)
}
inline void MessageChannelCreateChildChain::set_reserve_validator(int index, const char* value, size_t size) {
  reserve_validator_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.reserve_validator)
}
inline ::std::string* MessageChannelCreateChildChain::add_reserve_validator() {
  // @@protoc_insertion_point(field_add_mutable:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Add();
}
inline void MessageChannelCreateChildChain::add_reserve_validator(const ::std::string& value) {
  reserve_validator_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.MessageChannelCreateChildChain.reserve_validator)
}
inline void MessageChannelCreateChildChain::add_reserve_validator(const char* value) {
  reserve_validator_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.MessageChannelCreateChildChain.reserve_validator)
}
inline void MessageChannelCreateChildChain::add_reserve_validator(const char* value, size_t size) {
  reserve_validator_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.MessageChannelCreateChildChain.reserve_validator)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageChannelCreateChildChain::reserve_validator() const {
  // @@protoc_insertion_point(field_list:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageChannelCreateChildChain::mutable_reserve_validator() {
  // @@protoc_insertion_point(field_mutable_list:protocol.MessageChannelCreateChildChain.reserve_validator)
  return &reserve_validator_;
}

// optional string chain_name = 5;
inline void MessageChannelCreateChildChain::clear_chain_name() {
  chain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelCreateChildChain::chain_name() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.chain_name)
  return chain_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_chain_name(const ::std::string& value) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.chain_name)
}
inline void MessageChannelCreateChildChain::set_chain_name(const char* value) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.chain_name)
}
inline void MessageChannelCreateChildChain::set_chain_name(const char* value, size_t size) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.chain_name)
}
inline ::std::string* MessageChannelCreateChildChain::mutable_chain_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.chain_name)
  return chain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelCreateChildChain::release_chain_name() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.chain_name)
  
  return chain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_allocated_chain_name(::std::string* chain_name) {
  if (chain_name != NULL) {
    
  } else {
    
  }
  chain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.chain_name)
}

// optional int64 chain_id = 6;
inline void MessageChannelCreateChildChain::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelCreateChildChain::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.chain_id)
  return chain_id_;
}
inline void MessageChannelCreateChildChain::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.chain_id)
}

// optional string genesis_token_amount = 7;
inline void MessageChannelCreateChildChain::clear_genesis_token_amount() {
  genesis_token_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelCreateChildChain::genesis_token_amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  return genesis_token_amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_genesis_token_amount(const ::std::string& value) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
inline void MessageChannelCreateChildChain::set_genesis_token_amount(const char* value) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
inline void MessageChannelCreateChildChain::set_genesis_token_amount(const char* value, size_t size) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
inline ::std::string* MessageChannelCreateChildChain::mutable_genesis_token_amount() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  return genesis_token_amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelCreateChildChain::release_genesis_token_amount() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  
  return genesis_token_amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelCreateChildChain::set_allocated_genesis_token_amount(::std::string* genesis_token_amount) {
  if (genesis_token_amount != NULL) {
    
  } else {
    
  }
  genesis_token_amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genesis_token_amount);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}

// optional .protocol.BlockReward block_reward = 8;
inline bool MessageChannelCreateChildChain::has_block_reward() const {
  return !_is_default_instance_ && block_reward_ != NULL;
}
inline void MessageChannelCreateChildChain::clear_block_reward() {
  if (GetArenaNoVirtual() == NULL && block_reward_ != NULL) delete block_reward_;
  block_reward_ = NULL;
}
inline const ::protocol::BlockReward& MessageChannelCreateChildChain::block_reward() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.block_reward)
  return block_reward_ != NULL ? *block_reward_ : *default_instance_->block_reward_;
}
inline ::protocol::BlockReward* MessageChannelCreateChildChain::mutable_block_reward() {
  
  if (block_reward_ == NULL) {
    block_reward_ = new ::protocol::BlockReward;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.block_reward)
  return block_reward_;
}
inline ::protocol::BlockReward* MessageChannelCreateChildChain::release_block_reward() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.block_reward)
  
  ::protocol::BlockReward* temp = block_reward_;
  block_reward_ = NULL;
  return temp;
}
inline void MessageChannelCreateChildChain::set_allocated_block_reward(::protocol::BlockReward* block_reward) {
  delete block_reward_;
  block_reward_ = block_reward;
  if (block_reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.block_reward)
}

// optional int64 cost = 9;
inline void MessageChannelCreateChildChain::clear_cost() {
  cost_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelCreateChildChain::cost() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.cost)
  return cost_;
}
inline void MessageChannelCreateChildChain::set_cost(::google::protobuf::int64 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.cost)
}

// -------------------------------------------------------------------

// MessageChannelChildGenesesRequest

// optional int64 chain_id = 1;
inline void MessageChannelChildGenesesRequest::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelChildGenesesRequest::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesRequest.chain_id)
  return chain_id_;
}
inline void MessageChannelChildGenesesRequest::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesRequest.chain_id)
}

// -------------------------------------------------------------------

// MessageChannelChildGenesesResponse

// optional .protocol.ERRORCODE error_code = 1;
inline void MessageChannelChildGenesesResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::protocol::ERRORCODE MessageChannelChildGenesesResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
inline void MessageChannelChildGenesesResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesResponse.error_code)
}

// optional string error_desc = 2;
inline void MessageChannelChildGenesesResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelChildGenesesResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChildGenesesResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesResponse.error_desc)
}
inline void MessageChannelChildGenesesResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChildGenesesResponse.error_desc)
}
inline void MessageChannelChildGenesesResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChildGenesesResponse.error_desc)
}
inline ::std::string* MessageChannelChildGenesesResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildGenesesResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelChildGenesesResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildGenesesResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChildGenesesResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildGenesesResponse.error_desc)
}

// optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
inline bool MessageChannelChildGenesesResponse::has_create_child_chain() const {
  return !_is_default_instance_ && create_child_chain_ != NULL;
}
inline void MessageChannelChildGenesesResponse::clear_create_child_chain() {
  if (GetArenaNoVirtual() == NULL && create_child_chain_ != NULL) delete create_child_chain_;
  create_child_chain_ = NULL;
}
inline const ::protocol::MessageChannelCreateChildChain& MessageChannelChildGenesesResponse::create_child_chain() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  return create_child_chain_ != NULL ? *create_child_chain_ : *default_instance_->create_child_chain_;
}
inline ::protocol::MessageChannelCreateChildChain* MessageChannelChildGenesesResponse::mutable_create_child_chain() {
  
  if (create_child_chain_ == NULL) {
    create_child_chain_ = new ::protocol::MessageChannelCreateChildChain;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  return create_child_chain_;
}
inline ::protocol::MessageChannelCreateChildChain* MessageChannelChildGenesesResponse::release_create_child_chain() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  
  ::protocol::MessageChannelCreateChildChain* temp = create_child_chain_;
  create_child_chain_ = NULL;
  return temp;
}
inline void MessageChannelChildGenesesResponse::set_allocated_create_child_chain(::protocol::MessageChannelCreateChildChain* create_child_chain) {
  delete create_child_chain_;
  create_child_chain_ = create_child_chain;
  if (create_child_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildGenesesResponse.create_child_chain)
}

// -------------------------------------------------------------------

// MessageChannelQueryHead

// optional int64 ledger_seq = 1;
inline void MessageChannelQueryHead::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryHead::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryHead.ledger_seq)
  return ledger_seq_;
}
inline void MessageChannelQueryHead::set_ledger_seq(::google::protobuf::int64 value) {
  
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryHead.ledger_seq)
}

// -------------------------------------------------------------------

// MerkelProof

// optional bytes merkel_root = 1;
inline void MerkelProof::clear_merkel_root() {
  merkel_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MerkelProof::merkel_root() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.merkel_root)
  return merkel_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkelProof::set_merkel_root(const ::std::string& value) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MerkelProof.merkel_root)
}
inline void MerkelProof::set_merkel_root(const char* value) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MerkelProof.merkel_root)
}
inline void MerkelProof::set_merkel_root(const void* value, size_t size) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MerkelProof.merkel_root)
}
inline ::std::string* MerkelProof::mutable_merkel_root() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.merkel_root)
  return merkel_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MerkelProof::release_merkel_root() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.merkel_root)
  
  return merkel_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkelProof::set_allocated_merkel_root(::std::string* merkel_root) {
  if (merkel_root != NULL) {
    
  } else {
    
  }
  merkel_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkel_root);
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.merkel_root)
}

// optional bytes merkel_path = 2;
inline void MerkelProof::clear_merkel_path() {
  merkel_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MerkelProof::merkel_path() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.merkel_path)
  return merkel_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkelProof::set_merkel_path(const ::std::string& value) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MerkelProof.merkel_path)
}
inline void MerkelProof::set_merkel_path(const char* value) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MerkelProof.merkel_path)
}
inline void MerkelProof::set_merkel_path(const void* value, size_t size) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MerkelProof.merkel_path)
}
inline ::std::string* MerkelProof::mutable_merkel_path() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.merkel_path)
  return merkel_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MerkelProof::release_merkel_path() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.merkel_path)
  
  return merkel_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkelProof::set_allocated_merkel_path(::std::string* merkel_path) {
  if (merkel_path != NULL) {
    
  } else {
    
  }
  merkel_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkel_path);
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.merkel_path)
}

// optional .protocol.Transaction transaction = 3;
inline bool MerkelProof::has_transaction() const {
  return !_is_default_instance_ && transaction_ != NULL;
}
inline void MerkelProof::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
inline const ::protocol::Transaction& MerkelProof::transaction() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.transaction)
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
inline ::protocol::Transaction* MerkelProof::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::protocol::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.transaction)
  return transaction_;
}
inline ::protocol::Transaction* MerkelProof::release_transaction() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.transaction)
  
  ::protocol::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
inline void MerkelProof::set_allocated_transaction(::protocol::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.transaction)
}

// -------------------------------------------------------------------

// MessageChannelDeposit

// optional int64 chain_id = 1;
inline void MessageChannelDeposit::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelDeposit::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.chain_id)
  return chain_id_;
}
inline void MessageChannelDeposit::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.chain_id)
}

// optional int64 amount = 2;
inline void MessageChannelDeposit::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelDeposit::amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.amount)
  return amount_;
}
inline void MessageChannelDeposit::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.amount)
}

// optional int64 seq = 3;
inline void MessageChannelDeposit::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelDeposit::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.seq)
  return seq_;
}
inline void MessageChannelDeposit::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.seq)
}

// optional int64 block_number = 4;
inline void MessageChannelDeposit::clear_block_number() {
  block_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelDeposit::block_number() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.block_number)
  return block_number_;
}
inline void MessageChannelDeposit::set_block_number(::google::protobuf::int64 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.block_number)
}

// optional string source_address = 5;
inline void MessageChannelDeposit::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelDeposit::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelDeposit::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.source_address)
}
inline void MessageChannelDeposit::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelDeposit.source_address)
}
inline void MessageChannelDeposit::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelDeposit.source_address)
}
inline ::std::string* MessageChannelDeposit::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelDeposit.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelDeposit::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelDeposit.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelDeposit::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelDeposit.source_address)
}

// optional string address = 6;
inline void MessageChannelDeposit::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelDeposit::address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelDeposit::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.address)
}
inline void MessageChannelDeposit::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelDeposit.address)
}
inline void MessageChannelDeposit::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelDeposit.address)
}
inline ::std::string* MessageChannelDeposit::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelDeposit.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelDeposit::release_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelDeposit.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelDeposit::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelDeposit.address)
}

// -------------------------------------------------------------------

// MessageChannelWithdrawal

// optional int64 chain_id = 1;
inline void MessageChannelWithdrawal::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawal::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.chain_id)
  return chain_id_;
}
inline void MessageChannelWithdrawal::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.chain_id)
}

// optional int64 amount = 2;
inline void MessageChannelWithdrawal::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawal::amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.amount)
  return amount_;
}
inline void MessageChannelWithdrawal::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.amount)
}

// optional int64 seq = 3;
inline void MessageChannelWithdrawal::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawal::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.seq)
  return seq_;
}
inline void MessageChannelWithdrawal::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.seq)
}

// optional bytes block_hash = 4;
inline void MessageChannelWithdrawal::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawal::block_hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.block_hash)
  return block_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_block_hash(const ::std::string& value) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.block_hash)
}
inline void MessageChannelWithdrawal::set_block_hash(const char* value) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawal.block_hash)
}
inline void MessageChannelWithdrawal::set_block_hash(const void* value, size_t size) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawal.block_hash)
}
inline ::std::string* MessageChannelWithdrawal::mutable_block_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawal.block_hash)
  return block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawal::release_block_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawal.block_hash)
  
  return block_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash != NULL) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawal.block_hash)
}

// optional int64 block_seq = 5;
inline void MessageChannelWithdrawal::clear_block_seq() {
  block_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawal::block_seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.block_seq)
  return block_seq_;
}
inline void MessageChannelWithdrawal::set_block_seq(::google::protobuf::int64 value) {
  
  block_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.block_seq)
}

// optional string source_address = 6;
inline void MessageChannelWithdrawal::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawal::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.source_address)
}
inline void MessageChannelWithdrawal::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawal.source_address)
}
inline void MessageChannelWithdrawal::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawal.source_address)
}
inline ::std::string* MessageChannelWithdrawal::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawal.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawal::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawal.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawal.source_address)
}

// optional string address = 7;
inline void MessageChannelWithdrawal::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawal::address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawal.address)
}
inline void MessageChannelWithdrawal::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawal.address)
}
inline void MessageChannelWithdrawal::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawal.address)
}
inline ::std::string* MessageChannelWithdrawal::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawal.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawal::release_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawal.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawal::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawal.address)
}

// optional .protocol.MerkelProof merkel_proof = 8;
inline bool MessageChannelWithdrawal::has_merkel_proof() const {
  return !_is_default_instance_ && merkel_proof_ != NULL;
}
inline void MessageChannelWithdrawal::clear_merkel_proof() {
  if (GetArenaNoVirtual() == NULL && merkel_proof_ != NULL) delete merkel_proof_;
  merkel_proof_ = NULL;
}
inline const ::protocol::MerkelProof& MessageChannelWithdrawal::merkel_proof() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawal.merkel_proof)
  return merkel_proof_ != NULL ? *merkel_proof_ : *default_instance_->merkel_proof_;
}
inline ::protocol::MerkelProof* MessageChannelWithdrawal::mutable_merkel_proof() {
  
  if (merkel_proof_ == NULL) {
    merkel_proof_ = new ::protocol::MerkelProof;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawal.merkel_proof)
  return merkel_proof_;
}
inline ::protocol::MerkelProof* MessageChannelWithdrawal::release_merkel_proof() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawal.merkel_proof)
  
  ::protocol::MerkelProof* temp = merkel_proof_;
  merkel_proof_ = NULL;
  return temp;
}
inline void MessageChannelWithdrawal::set_allocated_merkel_proof(::protocol::MerkelProof* merkel_proof) {
  delete merkel_proof_;
  merkel_proof_ = merkel_proof;
  if (merkel_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawal.merkel_proof)
}

// -------------------------------------------------------------------

// MessageChannelWithdrawalChallenge

// optional int64 chain_id = 1;
inline void MessageChannelWithdrawalChallenge::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawalChallenge::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.chain_id)
  return chain_id_;
}
inline void MessageChannelWithdrawalChallenge::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.chain_id)
}

// optional int64 amount = 2;
inline void MessageChannelWithdrawalChallenge::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawalChallenge::amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.amount)
  return amount_;
}
inline void MessageChannelWithdrawalChallenge::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.amount)
}

// optional int64 seq = 3;
inline void MessageChannelWithdrawalChallenge::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawalChallenge::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.seq)
  return seq_;
}
inline void MessageChannelWithdrawalChallenge::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.seq)
}

// optional bytes block_hash = 4;
inline void MessageChannelWithdrawalChallenge::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawalChallenge::block_hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.block_hash)
  return block_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_block_hash(const ::std::string& value) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.block_hash)
}
inline void MessageChannelWithdrawalChallenge::set_block_hash(const char* value) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawalChallenge.block_hash)
}
inline void MessageChannelWithdrawalChallenge::set_block_hash(const void* value, size_t size) {
  
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawalChallenge.block_hash)
}
inline ::std::string* MessageChannelWithdrawalChallenge::mutable_block_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawalChallenge.block_hash)
  return block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawalChallenge::release_block_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawalChallenge.block_hash)
  
  return block_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash != NULL) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawalChallenge.block_hash)
}

// optional string source_address = 5;
inline void MessageChannelWithdrawalChallenge::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawalChallenge::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.source_address)
}
inline void MessageChannelWithdrawalChallenge::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawalChallenge.source_address)
}
inline void MessageChannelWithdrawalChallenge::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawalChallenge.source_address)
}
inline ::std::string* MessageChannelWithdrawalChallenge::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawalChallenge.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawalChallenge::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawalChallenge.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawalChallenge.source_address)
}

// optional string address = 6;
inline void MessageChannelWithdrawalChallenge::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawalChallenge::address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.address)
}
inline void MessageChannelWithdrawalChallenge::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawalChallenge.address)
}
inline void MessageChannelWithdrawalChallenge::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawalChallenge.address)
}
inline ::std::string* MessageChannelWithdrawalChallenge::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawalChallenge.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawalChallenge::release_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawalChallenge.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawalChallenge.address)
}

// optional string main_source_address = 7;
inline void MessageChannelWithdrawalChallenge::clear_main_source_address() {
  main_source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawalChallenge::main_source_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.main_source_address)
  return main_source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_main_source_address(const ::std::string& value) {
  
  main_source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.main_source_address)
}
inline void MessageChannelWithdrawalChallenge::set_main_source_address(const char* value) {
  
  main_source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawalChallenge.main_source_address)
}
inline void MessageChannelWithdrawalChallenge::set_main_source_address(const char* value, size_t size) {
  
  main_source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawalChallenge.main_source_address)
}
inline ::std::string* MessageChannelWithdrawalChallenge::mutable_main_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawalChallenge.main_source_address)
  return main_source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawalChallenge::release_main_source_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawalChallenge.main_source_address)
  
  return main_source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_allocated_main_source_address(::std::string* main_source_address) {
  if (main_source_address != NULL) {
    
  } else {
    
  }
  main_source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawalChallenge.main_source_address)
}

// optional int64 block_seq = 8;
inline void MessageChannelWithdrawalChallenge::clear_block_seq() {
  block_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawalChallenge::block_seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.block_seq)
  return block_seq_;
}
inline void MessageChannelWithdrawalChallenge::set_block_seq(::google::protobuf::int64 value) {
  
  block_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.block_seq)
}

// optional int64 state = 9;
inline void MessageChannelWithdrawalChallenge::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelWithdrawalChallenge::state() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.state)
  return state_;
}
inline void MessageChannelWithdrawalChallenge::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.state)
}

// optional string merkel_proof = 10;
inline void MessageChannelWithdrawalChallenge::clear_merkel_proof() {
  merkel_proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelWithdrawalChallenge::merkel_proof() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
  return merkel_proof_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_merkel_proof(const ::std::string& value) {
  
  merkel_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
}
inline void MessageChannelWithdrawalChallenge::set_merkel_proof(const char* value) {
  
  merkel_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
}
inline void MessageChannelWithdrawalChallenge::set_merkel_proof(const char* value, size_t size) {
  
  merkel_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
}
inline ::std::string* MessageChannelWithdrawalChallenge::mutable_merkel_proof() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
  return merkel_proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelWithdrawalChallenge::release_merkel_proof() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
  
  return merkel_proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelWithdrawalChallenge::set_allocated_merkel_proof(::std::string* merkel_proof) {
  if (merkel_proof != NULL) {
    
  } else {
    
  }
  merkel_proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkel_proof);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelWithdrawalChallenge.merkel_proof)
}

// -------------------------------------------------------------------

// MessageChannelChangeChildValidator

// optional string main_chain_tx_hash = 1;
inline void MessageChannelChangeChildValidator::clear_main_chain_tx_hash() {
  main_chain_tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelChangeChildValidator::main_chain_tx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
  return main_chain_tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_main_chain_tx_hash(const ::std::string& value) {
  
  main_chain_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
}
inline void MessageChannelChangeChildValidator::set_main_chain_tx_hash(const char* value) {
  
  main_chain_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
}
inline void MessageChannelChangeChildValidator::set_main_chain_tx_hash(const char* value, size_t size) {
  
  main_chain_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
}
inline ::std::string* MessageChannelChangeChildValidator::mutable_main_chain_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
  return main_chain_tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelChangeChildValidator::release_main_chain_tx_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
  
  return main_chain_tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_allocated_main_chain_tx_hash(::std::string* main_chain_tx_hash) {
  if (main_chain_tx_hash != NULL) {
    
  } else {
    
  }
  main_chain_tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_chain_tx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChangeChildValidator.main_chain_tx_hash)
}

// optional string add_validator = 2;
inline void MessageChannelChangeChildValidator::clear_add_validator() {
  add_validator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelChangeChildValidator::add_validator() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChangeChildValidator.add_validator)
  return add_validator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_add_validator(const ::std::string& value) {
  
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChangeChildValidator.add_validator)
}
inline void MessageChannelChangeChildValidator::set_add_validator(const char* value) {
  
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChangeChildValidator.add_validator)
}
inline void MessageChannelChangeChildValidator::set_add_validator(const char* value, size_t size) {
  
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChangeChildValidator.add_validator)
}
inline ::std::string* MessageChannelChangeChildValidator::mutable_add_validator() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChangeChildValidator.add_validator)
  return add_validator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelChangeChildValidator::release_add_validator() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChangeChildValidator.add_validator)
  
  return add_validator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_allocated_add_validator(::std::string* add_validator) {
  if (add_validator != NULL) {
    
  } else {
    
  }
  add_validator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_validator);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChangeChildValidator.add_validator)
}

// optional string delete_validator = 3;
inline void MessageChannelChangeChildValidator::clear_delete_validator() {
  delete_validator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelChangeChildValidator::delete_validator() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChangeChildValidator.delete_validator)
  return delete_validator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_delete_validator(const ::std::string& value) {
  
  delete_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChangeChildValidator.delete_validator)
}
inline void MessageChannelChangeChildValidator::set_delete_validator(const char* value) {
  
  delete_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChangeChildValidator.delete_validator)
}
inline void MessageChannelChangeChildValidator::set_delete_validator(const char* value, size_t size) {
  
  delete_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChangeChildValidator.delete_validator)
}
inline ::std::string* MessageChannelChangeChildValidator::mutable_delete_validator() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChangeChildValidator.delete_validator)
  return delete_validator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelChangeChildValidator::release_delete_validator() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChangeChildValidator.delete_validator)
  
  return delete_validator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_allocated_delete_validator(::std::string* delete_validator) {
  if (delete_validator != NULL) {
    
  } else {
    
  }
  delete_validator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delete_validator);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChangeChildValidator.delete_validator)
}

// optional string index = 4;
inline void MessageChannelChangeChildValidator::clear_index() {
  index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelChangeChildValidator::index() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChangeChildValidator.index)
  return index_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_index(const ::std::string& value) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChangeChildValidator.index)
}
inline void MessageChannelChangeChildValidator::set_index(const char* value) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChangeChildValidator.index)
}
inline void MessageChannelChangeChildValidator::set_index(const char* value, size_t size) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChangeChildValidator.index)
}
inline ::std::string* MessageChannelChangeChildValidator::mutable_index() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChangeChildValidator.index)
  return index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelChangeChildValidator::release_index() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChangeChildValidator.index)
  
  return index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelChangeChildValidator::set_allocated_index(::std::string* index) {
  if (index != NULL) {
    
  } else {
    
  }
  index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChangeChildValidator.index)
}

// -------------------------------------------------------------------

// MessageChannelQueryChangeChildValidator

// optional int64 chain_id = 1;
inline void MessageChannelQueryChangeChildValidator::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryChangeChildValidator::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryChangeChildValidator.chain_id)
  return chain_id_;
}
inline void MessageChannelQueryChangeChildValidator::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryChangeChildValidator.chain_id)
}

// optional int64 change_child_index = 2;
inline void MessageChannelQueryChangeChildValidator::clear_change_child_index() {
  change_child_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryChangeChildValidator::change_child_index() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryChangeChildValidator.change_child_index)
  return change_child_index_;
}
inline void MessageChannelQueryChangeChildValidator::set_change_child_index(::google::protobuf::int64 value) {
  
  change_child_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryChangeChildValidator.change_child_index)
}

// -------------------------------------------------------------------

// MessageChannelQuerySubmitHead

// optional int64 chain_id = 1;
inline void MessageChannelQuerySubmitHead::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQuerySubmitHead::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQuerySubmitHead.chain_id)
  return chain_id_;
}
inline void MessageChannelQuerySubmitHead::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQuerySubmitHead.chain_id)
}

// optional int64 seq = 2;
inline void MessageChannelQuerySubmitHead::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQuerySubmitHead::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQuerySubmitHead.seq)
  return seq_;
}
inline void MessageChannelQuerySubmitHead::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQuerySubmitHead.seq)
}

// optional bytes hash = 3;
inline void MessageChannelQuerySubmitHead::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageChannelQuerySubmitHead::hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQuerySubmitHead.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelQuerySubmitHead::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQuerySubmitHead.hash)
}
inline void MessageChannelQuerySubmitHead::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelQuerySubmitHead.hash)
}
inline void MessageChannelQuerySubmitHead::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelQuerySubmitHead.hash)
}
inline ::std::string* MessageChannelQuerySubmitHead::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelQuerySubmitHead.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageChannelQuerySubmitHead::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelQuerySubmitHead.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageChannelQuerySubmitHead::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelQuerySubmitHead.hash)
}

// -------------------------------------------------------------------

// MessageChannelSubmitHead

// optional .protocol.LedgerHeader header = 1;
inline bool MessageChannelSubmitHead::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void MessageChannelSubmitHead::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::protocol::LedgerHeader& MessageChannelSubmitHead::header() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelSubmitHead.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::protocol::LedgerHeader* MessageChannelSubmitHead::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelSubmitHead.header)
  return header_;
}
inline ::protocol::LedgerHeader* MessageChannelSubmitHead::release_header() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelSubmitHead.header)
  
  ::protocol::LedgerHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MessageChannelSubmitHead::set_allocated_header(::protocol::LedgerHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelSubmitHead.header)
}

// optional int64 state = 2;
inline void MessageChannelSubmitHead::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelSubmitHead::state() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelSubmitHead.state)
  return state_;
}
inline void MessageChannelSubmitHead::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelSubmitHead.state)
}

// -------------------------------------------------------------------

// MessageChannelHandleWithdrawal

// optional .protocol.MessageChannelWithdrawalChallenge withdrawal = 1;
inline bool MessageChannelHandleWithdrawal::has_withdrawal() const {
  return !_is_default_instance_ && withdrawal_ != NULL;
}
inline void MessageChannelHandleWithdrawal::clear_withdrawal() {
  if (GetArenaNoVirtual() == NULL && withdrawal_ != NULL) delete withdrawal_;
  withdrawal_ = NULL;
}
inline const ::protocol::MessageChannelWithdrawalChallenge& MessageChannelHandleWithdrawal::withdrawal() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHandleWithdrawal.withdrawal)
  return withdrawal_ != NULL ? *withdrawal_ : *default_instance_->withdrawal_;
}
inline ::protocol::MessageChannelWithdrawalChallenge* MessageChannelHandleWithdrawal::mutable_withdrawal() {
  
  if (withdrawal_ == NULL) {
    withdrawal_ = new ::protocol::MessageChannelWithdrawalChallenge;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHandleWithdrawal.withdrawal)
  return withdrawal_;
}
inline ::protocol::MessageChannelWithdrawalChallenge* MessageChannelHandleWithdrawal::release_withdrawal() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHandleWithdrawal.withdrawal)
  
  ::protocol::MessageChannelWithdrawalChallenge* temp = withdrawal_;
  withdrawal_ = NULL;
  return temp;
}
inline void MessageChannelHandleWithdrawal::set_allocated_withdrawal(::protocol::MessageChannelWithdrawalChallenge* withdrawal) {
  delete withdrawal_;
  withdrawal_ = withdrawal;
  if (withdrawal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHandleWithdrawal.withdrawal)
}

// optional int64 state = 2;
inline void MessageChannelHandleWithdrawal::clear_state() {
  state_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelHandleWithdrawal::state() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHandleWithdrawal.state)
  return state_;
}
inline void MessageChannelHandleWithdrawal::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHandleWithdrawal.state)
}

// -------------------------------------------------------------------

// MessageChannelQueryWithdrawal

// optional int64 chain_id = 1;
inline void MessageChannelQueryWithdrawal::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryWithdrawal::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryWithdrawal.chain_id)
  return chain_id_;
}
inline void MessageChannelQueryWithdrawal::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryWithdrawal.chain_id)
}

// optional int64 seq = 2;
inline void MessageChannelQueryWithdrawal::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelQueryWithdrawal::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryWithdrawal.seq)
  return seq_;
}
inline void MessageChannelQueryWithdrawal::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryWithdrawal.seq)
}

// -------------------------------------------------------------------

// MessageChannelChildChallengeHead

// optional int64 chain_id = 1;
inline void MessageChannelChildChallengeHead::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageChannelChildChallengeHead::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildChallengeHead.chain_id)
  return chain_id_;
}
inline void MessageChannelChildChallengeHead::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildChallengeHead.chain_id)
}

// optional .protocol.MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE type = 2;
inline void MessageChannelChildChallengeHead::clear_type() {
  type_ = 0;
}
inline ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE MessageChannelChildChallengeHead::type() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildChallengeHead.type)
  return static_cast< ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE >(type_);
}
inline void MessageChannelChildChallengeHead::set_type(::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildChallengeHead.type)
}

// optional .protocol.LedgerHeader cmc_head = 3;
inline bool MessageChannelChildChallengeHead::has_cmc_head() const {
  return !_is_default_instance_ && cmc_head_ != NULL;
}
inline void MessageChannelChildChallengeHead::clear_cmc_head() {
  if (GetArenaNoVirtual() == NULL && cmc_head_ != NULL) delete cmc_head_;
  cmc_head_ = NULL;
}
inline const ::protocol::LedgerHeader& MessageChannelChildChallengeHead::cmc_head() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildChallengeHead.cmc_head)
  return cmc_head_ != NULL ? *cmc_head_ : *default_instance_->cmc_head_;
}
inline ::protocol::LedgerHeader* MessageChannelChildChallengeHead::mutable_cmc_head() {
  
  if (cmc_head_ == NULL) {
    cmc_head_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildChallengeHead.cmc_head)
  return cmc_head_;
}
inline ::protocol::LedgerHeader* MessageChannelChildChallengeHead::release_cmc_head() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildChallengeHead.cmc_head)
  
  ::protocol::LedgerHeader* temp = cmc_head_;
  cmc_head_ = NULL;
  return temp;
}
inline void MessageChannelChildChallengeHead::set_allocated_cmc_head(::protocol::LedgerHeader* cmc_head) {
  delete cmc_head_;
  cmc_head_ = cmc_head;
  if (cmc_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildChallengeHead.cmc_head)
}

// optional .protocol.LedgerHeader child_head = 4;
inline bool MessageChannelChildChallengeHead::has_child_head() const {
  return !_is_default_instance_ && child_head_ != NULL;
}
inline void MessageChannelChildChallengeHead::clear_child_head() {
  if (GetArenaNoVirtual() == NULL && child_head_ != NULL) delete child_head_;
  child_head_ = NULL;
}
inline const ::protocol::LedgerHeader& MessageChannelChildChallengeHead::child_head() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildChallengeHead.child_head)
  return child_head_ != NULL ? *child_head_ : *default_instance_->child_head_;
}
inline ::protocol::LedgerHeader* MessageChannelChildChallengeHead::mutable_child_head() {
  
  if (child_head_ == NULL) {
    child_head_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildChallengeHead.child_head)
  return child_head_;
}
inline ::protocol::LedgerHeader* MessageChannelChildChallengeHead::release_child_head() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildChallengeHead.child_head)
  
  ::protocol::LedgerHeader* temp = child_head_;
  child_head_ = NULL;
  return temp;
}
inline void MessageChannelChildChallengeHead::set_allocated_child_head(::protocol::LedgerHeader* child_head) {
  delete child_head_;
  child_head_ = child_head;
  if (child_head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildChallengeHead.child_head)
}

// -------------------------------------------------------------------

// MessageChannelchildWithdrawalChallenge

// optional .protocol.MessageChannelWithdrawalChallenge withdrawal = 1;
inline bool MessageChannelchildWithdrawalChallenge::has_withdrawal() const {
  return !_is_default_instance_ && withdrawal_ != NULL;
}
inline void MessageChannelchildWithdrawalChallenge::clear_withdrawal() {
  if (GetArenaNoVirtual() == NULL && withdrawal_ != NULL) delete withdrawal_;
  withdrawal_ = NULL;
}
inline const ::protocol::MessageChannelWithdrawalChallenge& MessageChannelchildWithdrawalChallenge::withdrawal() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelchildWithdrawalChallenge.withdrawal)
  return withdrawal_ != NULL ? *withdrawal_ : *default_instance_->withdrawal_;
}
inline ::protocol::MessageChannelWithdrawalChallenge* MessageChannelchildWithdrawalChallenge::mutable_withdrawal() {
  
  if (withdrawal_ == NULL) {
    withdrawal_ = new ::protocol::MessageChannelWithdrawalChallenge;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelchildWithdrawalChallenge.withdrawal)
  return withdrawal_;
}
inline ::protocol::MessageChannelWithdrawalChallenge* MessageChannelchildWithdrawalChallenge::release_withdrawal() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelchildWithdrawalChallenge.withdrawal)
  
  ::protocol::MessageChannelWithdrawalChallenge* temp = withdrawal_;
  withdrawal_ = NULL;
  return temp;
}
inline void MessageChannelchildWithdrawalChallenge::set_allocated_withdrawal(::protocol::MessageChannelWithdrawalChallenge* withdrawal) {
  delete withdrawal_;
  withdrawal_ = withdrawal;
  if (withdrawal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelchildWithdrawalChallenge.withdrawal)
}

// optional .protocol.MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE type = 2;
inline void MessageChannelchildWithdrawalChallenge::clear_type() {
  type_ = 0;
}
inline ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE MessageChannelchildWithdrawalChallenge::type() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelchildWithdrawalChallenge.type)
  return static_cast< ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE >(type_);
}
inline void MessageChannelchildWithdrawalChallenge::set_type(::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelchildWithdrawalChallenge.type)
}

// optional .protocol.MerkelProof merkel_proof = 3;
inline bool MessageChannelchildWithdrawalChallenge::has_merkel_proof() const {
  return !_is_default_instance_ && merkel_proof_ != NULL;
}
inline void MessageChannelchildWithdrawalChallenge::clear_merkel_proof() {
  if (GetArenaNoVirtual() == NULL && merkel_proof_ != NULL) delete merkel_proof_;
  merkel_proof_ = NULL;
}
inline const ::protocol::MerkelProof& MessageChannelchildWithdrawalChallenge::merkel_proof() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelchildWithdrawalChallenge.merkel_proof)
  return merkel_proof_ != NULL ? *merkel_proof_ : *default_instance_->merkel_proof_;
}
inline ::protocol::MerkelProof* MessageChannelchildWithdrawalChallenge::mutable_merkel_proof() {
  
  if (merkel_proof_ == NULL) {
    merkel_proof_ = new ::protocol::MerkelProof;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelchildWithdrawalChallenge.merkel_proof)
  return merkel_proof_;
}
inline ::protocol::MerkelProof* MessageChannelchildWithdrawalChallenge::release_merkel_proof() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelchildWithdrawalChallenge.merkel_proof)
  
  ::protocol::MerkelProof* temp = merkel_proof_;
  merkel_proof_ = NULL;
  return temp;
}
inline void MessageChannelchildWithdrawalChallenge::set_allocated_merkel_proof(::protocol::MerkelProof* merkel_proof) {
  delete merkel_proof_;
  merkel_proof_ = merkel_proof;
  if (merkel_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelchildWithdrawalChallenge.merkel_proof)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::Ledgers_SyncCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Ledgers_SyncCode>() {
  return ::protocol::Ledgers_SyncCode_descriptor();
}
template <> struct is_proto_enum< ::protocol::ChainTxStatus_TxStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::ChainTxStatus_TxStatus>() {
  return ::protocol::ChainTxStatus_TxStatus_descriptor();
}
template <> struct is_proto_enum< ::protocol::OVERLAY_MESSAGE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::OVERLAY_MESSAGE_TYPE>() {
  return ::protocol::OVERLAY_MESSAGE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::protocol::ChainMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::ChainMessageType>() {
  return ::protocol::ChainMessageType_descriptor();
}
template <> struct is_proto_enum< ::protocol::MESSAGE_CHANNEL_NODE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MESSAGE_CHANNEL_NODE_TYPE>() {
  return ::protocol::MESSAGE_CHANNEL_NODE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::protocol::MESSAGE_CHANNEL_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MESSAGE_CHANNEL_TYPE>() {
  return ::protocol::MESSAGE_CHANNEL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE>() {
  return ::protocol::MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_descriptor();
}
template <> struct is_proto_enum< ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE>() {
  return ::protocol::MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_overlay_2eproto__INCLUDED
