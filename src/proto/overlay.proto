syntax = "proto3";
package protocol;
option java_package = "io.bumo.sdk.core.extend.protobuf";

import "common.proto";
import "chain.proto";
import "consensus.proto";

enum OVERLAY_MESSAGE_TYPE{
	OVERLAY_MSGTYPE_NONE = 0;
	OVERLAY_MSGTYPE_PING  = 1;
	OVERLAY_MSGTYPE_HELLO = 2;
	OVERLAY_MSGTYPE_PEERS = 3;
	OVERLAY_MSGTYPE_TRANSACTION = 4;
	OVERLAY_MSGTYPE_LEDGERS = 5;
	OVERLAY_MSGTYPE_PBFT = 6;
	OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY = 7; //Broadcast the ledger upgrade status
}

message Hello {
    int64 network_id = 1;
    int64 ledger_version = 2;
    int64 overlay_version = 3;
    string bumo_version = 4;
    int64 listening_port = 5;
    string node_address = 6;
    string node_rand = 7;
}

message HelloResponse {
	 ERRORCODE error_code = 1;
	 string error_desc = 2;
}

//for peers message
message Peer {
		string ip = 1;
		int64 port = 2;
		int64 num_failures = 3;
		int64 next_attempt_time = 4;
		int64 active_time = 5;
		int64 connection_id = 6;
}

message Peers {
    repeated Peer peers = 1;
}

//for getledgers
message GetLedgers
{
	int64 begin = 1;
	int64 end   = 2;
	int64 timestamp  = 3;
	int64 chain_id = 4;
}


//for ledgers
message Ledgers
{
	enum SyncCode{
		OK = 0;          //Success
		OUT_OF_SYNC = 1;    //The node itself is not in sync status
		OUT_OF_LEDGERS = 2; //Too many requested ledgers
		BUSY = 3;           //This node is occupied
		REFUSE = 4;         //The node itself is not allow sync
		INTERNAL = 5;       //Inner error
	}
	repeated ConsensusValue values = 1;
	SyncCode sync_code = 2;
	int64    max_seq = 3;
	bytes   proof = 4;
	int64   chain_id = 5;
}

//for dont have
message DontHave
{
    int64 type = 1;
    bytes hash = 2;
};

//for ledger upgrade
message LedgerUpgradeNotify
{
	int64 nonce = 1;   //for broadcast
	LedgerUpgrade upgrade = 2;
	Signature signature = 3;   //consensus sig
};

//for key value db storage
message EntryList{
	repeated bytes entry = 1;
}

//message interfaces for java
enum ChainMessageType {
	CHAIN_TYPE_NONE = 0;
	CHAIN_HELLO = 10; // response with CHAIN_STATUS = 2;
	CHAIN_TX_STATUS = 11;
	CHAIN_PEER_ONLINE = 12;
	CHAIN_PEER_OFFLINE = 13;
	CHAIN_PEER_MESSAGE = 14;
	CHAIN_SUBMITTRANSACTION = 15;
	CHAIN_LEDGER_HEADER = 16; //bumo notifies the client ledger(protocol::LedgerHeader) when closed
	CHAIN_SUBSCRIBE_TX = 17; //response with CHAIN_RESPONSE
	CHAIN_TX_ENV_STORE = 18;
}

//Register notification events
message ChainHello {
	repeated ChainMessageType api_list = 1;	//By default, enable all apis
	int64	timestamp = 2;
}


//1.ChainHello response
//2.async notification from local
message ChainStatus {
	string self_addr		= 1;
	int64 ledger_version	= 2;
	int64 monitor_version	= 3;
	string bumo_version		= 4;
	int64	timestamp		= 5;
}

message ChainPeerMessage {
	string src_peer_addr = 1; 
	repeated string des_peer_addrs = 2; 
	bytes	data = 3;		
}

message ChainSubscribeTx{
	repeated string address = 1;
}

message ChainResponse{
		int32 error_code = 1;
		string error_desc = 2;
}

message ChainTxStatus {
	enum TxStatus {
		UNDEFINED	= 0;
		CONFIRMED	= 1;	// web server will check tx parameters, signatures etc fist, noitfy CONFIRMED if pass
		PENDING		= 2;	// master will check futher before put it into pending queue
		COMPLETE	= 3;	// notify if Tx write ledger successfully
		FAILURE		= 4;	// notify once failed and set error_code
	};

	TxStatus	status = 1;
	string		tx_hash = 2;
	string		source_address = 3;
	int64		source_account_seq = 4;
	int64		ledger_seq = 5;			//on which block this tx records
	int64		new_account_seq = 6;		//new account sequence if COMPLETE
	ERRORCODE	error_code = 7;			//use it if FAIL
	string		error_desc = 8	;			//error desc
	int64		timestamp = 9;			
}

enum MESSAGE_CHANNEL_NODE_TYPE{
    MESSAGE_CHANNEL_NODE_TYPE_NONE = 0;
	MESSAGE_CHANNEL_NODE_PACKAGE = 30;
	MESSAGE_CHANNEL_NODE_HELLO = 31;
	EVENT_WITHDRAWAL = 32;
}

enum MESSAGE_CHANNEL_TYPE{
	MESSAGE_CHANNEL_TYPE_NONE = 0;
	MESSAGE_CHANNEL_CREATE_CHILD_CHAIN = 1;
	MESSAGE_CHANNEL_MAIN_MIX  = 2;
	MESSAGE_CHANNEL_CHILD_MIX = 3;
	MESSAGE_CHANNEL_DEPOSIT = 4;
	MESSAGE_CHANNEL_WITHDRAWAL = 5;
	MESSAGE_CHANNEL_FAST_WITHDRAWAL = 6;
	MESSAGE_CHANNEL_SUBMIT_HEAD = 7;
	MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL = 8; 
	MESSAGE_CHANNEL_CHALLENGE_HEAD = 9;
	MESSAGE_CHANNEL_CHILD_GENESES_REQUEST = 10;
	MESSAGE_CHANNEL_CHILD_GENESES_RESPONSE = 11;
	MESSAGE_CHANNEL_QUERY_HEAD = 12;
	MESSAGE_CHANNEL_QUERY_DEPOSIT = 13;
	MESSAGE_CHANNEL_CHANGE_CHILD_VALIDATOR = 14;
	MESSAGE_CHANNEL_QUERY_CHANGE_CHILD_VALIDATOR = 15;
	MESSAGE_CHANNEL_QUERY_SUBMIT_HEAD = 16;
	MESSAGE_CHANNEL_QUERY_WITHDRAWAL = 17;
	MESSAGE_CHANNEL_CHILD_CHALLENGE_HEAD = 18;
	MESSAGE_CHANNEL_CHILD_CHALLENGE_WITHDRAWAL = 19;
}


enum MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE{
	MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_SUCCESS = 0;
	MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_NONEXIST = 1;
	MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE_DOCTORED = 2;
}

enum MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE{
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_SUCCESS = 0;
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_NONEXIST = 1;
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_DOCTORED = 2;
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_CONTRACT_CPC_QUERY = 3; 
  MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE_CONTRACT_CPC_DOCTORED = 4;
}


message MessageChannelQueryDeposit{
    int64 chain_id = 1;
	int64 seq = 2;
}

message MessageChannelHello {
    int64 network_id = 1;
    string node_address = 2;
    int64 chain_id = 3;
	string round_string = 4;
}

message MessageChannelHelloResponse {
	 ERRORCODE error_code = 1;
	 string error_desc = 2;
	 Signature round_signature = 3;
}

message MessageChannel{
    int64 target_chain_id = 1;
    MESSAGE_CHANNEL_TYPE msg_type = 2;
    bytes msg_data = 3;
}

message MessageChannelResponse {
	 ERRORCODE error_code = 1;
	 string error_desc = 2;
}

message MessageChannelProposer{
   LedgerHeader header = 1;
   string proposer_address = 2;
   bytes  proposer_signature = 3;
   bytes  header_hash= 4;
}

message BlockReward{
	int64 amount = 1;
	int64 period = 2;
	double ratio = 3;
}

message MessageChannelCreateChildChain{
	string genesis_account = 1;
	string slogan = 2;
	FeeConfig fee = 3;
	repeated string reserve_validator = 4;
	string chain_name = 5;
	int64 chain_id = 6;
	string genesis_token_amount = 7;
	BlockReward block_reward = 8;
	int64 cost = 9;
}

message MessageChannelChildGenesesRequest{
	int64 chain_id = 1;
}

message MessageChannelChildGenesesResponse{
	ERRORCODE error_code = 1;
	string error_desc = 2;
	MessageChannelCreateChildChain create_child_chain = 3;
}


message MessageChannelQueryHead{
	int64 ledger_seq = 1;
}

message MerkelProof {
	bytes merkel_root = 1;
	bytes merkel_path = 2;
	Transaction transaction = 3;
}

message MessageChannelDeposit{
	int64 chain_id = 1;
	int64 amount = 2;
	int64 seq = 3;
	int64 block_number = 4;
	string source_address = 5;
	string address = 6;
}

message MessageChannelWithdrawal{
	int64 chain_id = 1;
	int64 amount = 2;
	int64 seq = 3;
	bytes block_hash = 4;
	int64 block_seq = 5;
	string source_address = 6;
	string address = 7;
	MerkelProof merkel_proof = 8;
}

message MessageChannelWithdrawalChallenge{
	int64 chain_id = 1;
	int64 amount = 2;
	int64 seq = 3;
	bytes block_hash = 4;
	string source_address = 5;
	string address = 6;
	string main_source_address = 7;
	int64 block_seq = 8;
	int64  state = 9;
	string merkel_proof = 10;
}

message MessageChannelChangeChildValidator{
    string main_chain_tx_hash = 1;
	string add_validator = 2;
	string delete_validator = 3;
	string index = 4;
}

message MessageChannelQueryChangeChildValidator{
	int64 chain_id = 1;
	int64 change_child_index = 2;
}

message MessageChannelQuerySubmitHead{
    int64 chain_id = 1;
	int64 seq = 2;
	bytes hash = 3;
}

message MessageChannelSubmitHead{
    LedgerHeader header = 1;
	int64 state = 2;
}


message MessageChannelHandleWithdrawal{
    MessageChannelWithdrawalChallenge withdrawal = 1;
	int64 state = 2;
}


message MessageChannelQueryWithdrawal{
    int64 chain_id = 1;
	int64 seq = 2;
}

message MessageChannelChildChallengeHead{
    int64 chain_id = 1;
    MESSAGE_CHANNEL_CHALLENGE_HEAD_TYPE type = 2;
	LedgerHeader cmc_head = 3;
	LedgerHeader child_head = 4;
}


message MessageChannelchildWithdrawalChallenge{
    MessageChannelWithdrawalChallenge withdrawal = 1;
	MESSAGE_CHANNEL_CHALLENGE_WITHDRAWAL_TYPE type = 2;
	MerkelProof merkel_proof = 3;
}







